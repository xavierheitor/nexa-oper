/**
 * Servi√ßo de Banco de Dados
 *
 * Este servi√ßo gerencia a conex√£o com o banco de dados usando Prisma Client,
 * configurando automaticamente o timezone para GMT-3 (Bras√≠lia) e seguindo
 * os padr√µes de inje√ß√£o de depend√™ncia do NestJS.
 *
 * FUNCIONALIDADES:
 * - Gerenciamento autom√°tico de conex√£o/desconex√£o
 * - Configura√ß√£o autom√°tica de timezone (GMT-3)
 * - Logging integrado para desenvolvimento
 * - Health check para monitoramento
 * - Compat√≠vel com inje√ß√£o de depend√™ncia do NestJS
 *
 * COMO USAR:
 * ```typescript
 * // Inje√ß√£o de depend√™ncia (recomendado):
 * constructor(private readonly db: DatabaseService) {}
 * const users = await this.db.getPrisma().user.findMany();
 * ```
 *
 * BENEF√çCIOS:
 * - Segue padr√µes do NestJS
 * - Timezone configurado automaticamente
 * - F√°cil de testar (mock simples)
 * - Ciclo de vida gerenciado pelo NestJS
 */

import {
  Injectable,
  Logger,
  OnModuleDestroy,
  OnModuleInit,
} from '@nestjs/common';
import { PrismaClient, Test } from '@nexa-oper/db';

@Injectable()
export class DatabaseService implements OnModuleInit, OnModuleDestroy {
  private readonly logger = new Logger(DatabaseService.name);
  private readonly prisma = new PrismaClient({
    log:
      process.env['NODE_ENV'] === 'development'
        ? ['query', 'error', 'warn']
        : ['error'],
  });

  async onModuleInit() {
    this.logger.log('üîÑ Conectando ao banco de dados...');
    try {
      await this.prisma.$connect();

      // Configurar timezone para GMT-3 (Hor√°rio de Bras√≠lia)
      // Isso garante que todas as opera√ß√µes de data/hora usem o timezone correto
      await this.prisma.$executeRaw`SET time_zone = '-03:00'`;

      // Verificar se o timezone foi configurado corretamente
      const timezoneResult = await this.prisma.$queryRaw`SELECT @@session.time_zone as timezone`;
      this.logger.log('‚úÖ Conectado ao banco de dados com sucesso!');
      this.logger.log(`üåê Timezone configurado: ${JSON.stringify(timezoneResult)}`);

    } catch (error: unknown) {
      this.logger.error('‚ùå Erro ao conectar ao banco:', error);
      throw error;
    }
  }

  async onModuleDestroy() {
    this.logger.log('üîÑ Desconectando do banco de dados...');
    try {
      await this.prisma.$disconnect();
      this.logger.log('‚úÖ Desconectado do banco de dados com sucesso!');
    } catch (error: unknown) {
      this.logger.error('‚ùå Erro ao desconectar do banco:', error);
    }
  }

  // M√©todo para acessar o Prisma Client (mantido para compatibilidade)
  getPrisma(): PrismaClient {
    return this.prisma;
  }

  // M√©todos de exemplo para o modelo Test (mantidos para compatibilidade)
  async findAllTests(): Promise<Test[]> {
    return await this.prisma.test.findMany();
  }
  async createTest(name: string): Promise<Test> {
    return await this.prisma.test.create({
      data: { name },
    });
  }

  async updateTest(id: number, name: string): Promise<Test> {
    return await this.prisma.test.update({
      where: { id },
      data: { name },
    });
  }

  async deleteTest(id: number): Promise<Test> {
    return await this.prisma.test.delete({
      where: { id },
    });
  }

  // M√©todo para verificar sa√∫de da conex√£o
  async healthCheck(): Promise<boolean> {
    try {
      await this.prisma.$queryRaw`SELECT 1`;
      return true;
    } catch (error) {
      this.logger.error('‚ùå Health check falhou:', error);
      return false;
    }
  }
}

/**
 * Exporta√ß√£o do PrismaClient para uso direto quando necess√°rio
 *
 * ATEN√á√ÉO: Prefira usar inje√ß√£o de depend√™ncia do DatabaseService
 * em vez de importar diretamente o PrismaClient.
 *
 * @deprecated Use DatabaseService via inje√ß√£o de depend√™ncia
 */
export { PrismaClient };
