/**
 * Ponto de Entrada da API NestJS - Nexa Oper
 *
 * Este arquivo configura e inicializa a aplica√ß√£o NestJS com todas as
 * configura√ß√µes necess√°rias para produ√ß√£o e desenvolvimento.
 *
 * CONFIGURA√á√ïES IMPLEMENTADAS:
 * - CORS para comunica√ß√£o com aplica√ß√£o web
 * - Parsing de JSON/URL com limite de 50MB
 * - Timeout de requisi√ß√µes (5 minutos)
 * - Filtro global de exce√ß√µes
 * - Prefixo global 'api' para todas as rotas
 * - Shutdown hooks para graceful shutdown
 * - Logging estruturado de inicializa√ß√£o
 *
 * ARQUITETURA:
 * - Segue padr√µes do NestJS com m√≥dulos organizados
 * - Middleware de logging para todas as requisi√ß√µes
 * - Tratamento global de exce√ß√µes padronizado
 * - Configura√ß√µes environment-aware (dev/prod)
 *
 * EXEMPLO DE ROTAS:
 * - Health Check: GET /api/health
 * - APR Modelos: GET /api/apr/modelos
 * - Database: GET /api/db/test
 *
 * VARI√ÅVEIS DE AMBIENTE:
 * - PORT: Porta da aplica√ß√£o (padr√£o: 3001)
 * - NODE_ENV: Ambiente de execu√ß√£o (development/production)
 * - DATABASE_URL: String de conex√£o do banco de dados
 * - JWT_SECRET: Chave secreta para assinatura de tokens JWT (obrigat√≥rio, m√≠nimo 32 caracteres)
 *
 * @example
 * ```bash
 * # Desenvolvimento
 * npm run start:dev
 *
 * # Produ√ß√£o
 * npm run build
 * npm run start:prod
 * ```
 */

// Carregar vari√°veis de ambiente do arquivo .env antes de qualquer outra coisa
import * as dotenv from 'dotenv';
import { resolve } from 'path';

// Carregar .env do diret√≥rio raiz do projeto API
// Em desenvolvimento: __dirname √© src/
// Em produ√ß√£o (compilado): __dirname √© dist/
const envPath = resolve(
  __dirname.includes('dist') ? __dirname.replace('/dist', '') : __dirname.replace('/src', ''),
  '.env'
);
dotenv.config({ path: envPath });

import { Logger, ValidationPipe } from '@nestjs/common';
import { NestFactory } from '@nestjs/core';
import { DocumentBuilder, SwaggerModule } from '@nestjs/swagger';
import * as express from 'express';
import { NextFunction, Request, Response } from 'express';
import { exec } from 'child_process';
import { promisify } from 'util';
import { AppModule } from './app.module';
import { AllExceptionsFilter } from '@common/filters/all-exceptions.filter';

const execAsync = promisify(exec);

/**
 * Valida vari√°veis de ambiente cr√≠ticas antes da inicializa√ß√£o
 *
 * Garante que todas as vari√°veis de ambiente obrigat√≥rias est√£o
 * configuradas e t√™m valores v√°lidos antes de iniciar a aplica√ß√£o.
 *
 * @throws {Error} Se alguma vari√°vel obrigat√≥ria estiver ausente ou inv√°lida
 */
function validateEnvironmentVariables(): void {
  const logger = new Logger('Bootstrap');

  // Lista de vari√°veis obrigat√≥rias e suas valida√ß√µes
  const requiredEnvVars = [
    {
      name: 'JWT_SECRET',
      value: process.env.JWT_SECRET,
      validator: (val: string | undefined) => {
        if (!val || val.trim() === '') {
          return 'JWT_SECRET n√£o pode estar vazio';
        }
        if (val === 'secret' || val.length < 32) {
          return 'JWT_SECRET deve ser uma string segura com pelo menos 32 caracteres e n√£o pode ser "secret"';
        }
        return null;
      },
    },
    {
      name: 'DATABASE_URL',
      value: process.env.DATABASE_URL,
      validator: (val: string | undefined) => {
        if (!val || val.trim() === '') {
          return 'DATABASE_URL n√£o pode estar vazio';
        }
        return null;
      },
    },
  ];

  const errors: string[] = [];

  for (const envVar of requiredEnvVars) {
    const error = envVar.validator(envVar.value);
    if (error) {
      errors.push(`${envVar.name}: ${error}`);
    }
  }

  if (errors.length > 0) {
    logger.error('‚ùå Erro de valida√ß√£o de vari√°veis de ambiente:');
    errors.forEach(error => logger.error(`  - ${error}`));
    logger.error(
      'üí° Configure as vari√°veis de ambiente necess√°rias antes de iniciar a aplica√ß√£o.'
    );
    throw new Error(
      `Vari√°veis de ambiente inv√°lidas: ${errors.join('; ')}`
    );
  }

  logger.log('‚úÖ Vari√°veis de ambiente validadas com sucesso');
}

/**
 * Verifica se a porta est√° em uso
 * @param port - Porta a ser verificada
 * @returns True se a porta estiver em uso
 */
async function isPortInUse(port: number): Promise<boolean> {
  try {
    const { stdout } = await execAsync(`lsof -ti:${port}`);
    return stdout.trim().length > 0;
  } catch {
    // Se n√£o encontrar processos, a porta est√° livre
    return false;
  }
}

/**
 * Mata processos que est√£o usando a porta
 * @param port - Porta a ser liberada
 */
async function killPortProcesses(port: number): Promise<void> {
  try {
    const { stdout } = await execAsync(`lsof -ti:${port}`);
    const pids = stdout
      .trim()
      .split('\n')
      .filter(pid => pid.length > 0);

    if (pids.length > 0) {
      console.log(
        `üîÑ Encontrados ${pids.length} processo(s) usando a porta ${port}`
      );

      for (const pid of pids) {
        try {
          await execAsync(`kill -9 ${pid}`);
          console.log(`‚úÖ Processo ${pid} finalizado`);
        } catch (error) {
          console.log(`‚ö†Ô∏è  Erro ao finalizar processo ${pid}:`, error.message);
        }
      }

      // Aguardar um pouco para garantir que a porta foi liberada
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
  } catch {
    console.log(`‚ÑπÔ∏è  Nenhum processo encontrado na porta ${port}`);
  }
}

/**
 * Limpa a porta antes da inicializa√ß√£o
 * @param port - Porta a ser limpa
 */
async function cleanupPort(port: number): Promise<void> {
  console.log(`üîç Verificando porta ${port}...`);

  if (await isPortInUse(port)) {
    console.log(`‚ö†Ô∏è  Porta ${port} est√° em uso. Liberando...`);
    await killPortProcesses(port);

    // Verificar novamente
    if (await isPortInUse(port)) {
      throw new Error(`Falha ao liberar porta ${port}`);
    } else {
      console.log(`‚úÖ Porta ${port} liberada com sucesso`);
    }
  } else {
    console.log(`‚úÖ Porta ${port} est√° livre`);
  }
}

/**
 * Fun√ß√£o principal de inicializa√ß√£o da aplica√ß√£o
 *
 * Configura todas as funcionalidades necess√°rias da API incluindo:
 * - Middlewares de parsing e timeout
 * - CORS para integra√ß√£o com frontend
 * - Valida√ß√£o global de DTOs
 * - Documenta√ß√£o Swagger
 * - Filtros de exce√ß√£o globais
 * - Logging estruturado
 *
 * @throws {Error} Se falhar na inicializa√ß√£o da aplica√ß√£o
 *
 * @example
 * ```typescript
 * // A fun√ß√£o √© chamada automaticamente na inicializa√ß√£o
 * // N√£o precisa ser chamada manualmente
 * ```
 */
async function bootstrap(): Promise<void> {
  const logger = new Logger('Bootstrap');

  try {
    logger.log('üöÄ Iniciando aplica√ß√£o Nexa Oper API...');

    // Validar vari√°veis de ambiente cr√≠ticas antes de qualquer inicializa√ß√£o
    validateEnvironmentVariables();

    // Limpar porta antes da inicializa√ß√£o
    const port = parseInt(process.env.PORT ?? '3001', 10);
    await cleanupPort(port);

    // Criar aplica√ß√£o NestJS
    const app = await NestFactory.create(AppModule, {
      logger: ['log', 'error', 'warn', 'debug', 'verbose'],
      abortOnError: false, // Evita crash em caso de erro durante inicializa√ß√£o
    });

    // Configurar parsing de requisi√ß√µes com limite generoso
    app.use(express.json({ limit: '50mb' }));
    app.use(express.urlencoded({ extended: true, limit: '50mb' }));
    logger.log('‚úÖ Configurado parsing JSON/URL com limite de 50MB');

    // Configurar CORS para integra√ß√£o com aplica√ß√£o web
    const corsOrigins =
      process.env.NODE_ENV === 'production'
        ? ['https://seu-dominio.com'] // TODO: Atualizar com dom√≠nio real
        : ['http://localhost:3000', 'http://127.0.0.1:3000'];

    app.enableCors({
      origin: corsOrigins,
      credentials: true,
      methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS'],
      allowedHeaders: ['Content-Type', 'Authorization', 'Accept'],
    });
    logger.log(`‚úÖ CORS configurado para: ${corsOrigins.join(', ')}`);

    // Configurar timeout de requisi√ß√µes (5 minutos)
    app.use((req: Request, res: Response, next: NextFunction) => {
      const timeoutMs = 300000; // 5 minutos
      req.setTimeout(timeoutMs);
      res.setTimeout(timeoutMs);
      next();
    });
    logger.log('‚úÖ Timeout de requisi√ß√µes configurado para 5 minutos');

    // Configurar valida√ß√£o global de DTOs
    app.useGlobalPipes(
      new ValidationPipe({
        transform: true, // Transforma automaticamente tipos
        whitelist: true, // Remove propriedades n√£o definidas no DTO
        forbidNonWhitelisted: true, // Rejeita propriedades extras
        validateCustomDecorators: false, // Desabilitado para evitar conflitos com decorators customizados
      })
    );
    logger.log('‚úÖ Valida√ß√£o global de DTOs configurada');

    // Configurar filtro global de exce√ß√µes
    app.useGlobalFilters(new AllExceptionsFilter());
    logger.log('‚úÖ Filtro global de exce√ß√µes configurado');

    // Configurar documenta√ß√£o Swagger (apenas em desenvolvimento)
    if (process.env.NODE_ENV !== 'production') {
      const config = new DocumentBuilder()
        .setTitle('Nexa Oper API')
        .setDescription('API para gerenciamento de opera√ß√µes da Nexa')
        .setVersion('1.0')
        .addTag('apr', 'An√°lise Preliminar de Risco')
        .addTag('checklist', 'Checklists de Seguran√ßa')
        .addTag('database', 'Opera√ß√µes de Banco de Dados')
        .addBearerAuth()
        .build();

      const document = SwaggerModule.createDocument(app, config);
      SwaggerModule.setup('api/docs', app, document);
      logger.log('‚úÖ Documenta√ß√£o Swagger dispon√≠vel em /api/docs');
    }

    // Configurar prefixo global e shutdown hooks
    app.setGlobalPrefix('api');
    app.enableShutdownHooks();
    logger.log('‚úÖ Prefixo global "api" configurado');

    // Configurar graceful shutdown
    const gracefulShutdown = async (signal: string) => {
      logger.log(`üîÑ Recebido sinal ${signal}. Iniciando graceful shutdown...`);

      try {
        await app.close();
        logger.log('‚úÖ Aplica√ß√£o finalizada com sucesso');
        process.exit(0);
      } catch (error) {
        logger.error('‚ùå Erro durante graceful shutdown:', error);
        process.exit(1);
      }
    };

    // Registrar handlers de shutdown
    process.on('SIGTERM', () => {
      void gracefulShutdown('SIGTERM');
    });
    process.on('SIGINT', () => {
      void gracefulShutdown('SIGINT');
    });
    process.on('SIGHUP', () => {
      void gracefulShutdown('SIGHUP');
    });

    // Inicializar servidor
    await app.listen(port);

    // Logging final de sucesso
    logger.log(`üéâ API Nexa Oper iniciada com sucesso!`);
    logger.log(`üåê Servidor rodando na porta: ${port}`);
    logger.log(`üì± Ambiente: ${process.env.NODE_ENV ?? 'development'}`);
    logger.log(`üîó URL base: http://localhost:${port}/api`);

    if (process.env.NODE_ENV !== 'production') {
      logger.log(`üìö Documenta√ß√£o: http://localhost:${port}/api/docs`);
    }
  } catch (error) {
    logger.error('‚ùå Falha cr√≠tica na inicializa√ß√£o da aplica√ß√£o:', error);
    process.exit(1);
  }
}

// Inicializar aplica√ß√£o com tratamento de erros robusto
bootstrap().catch((error: unknown) => {
  const logger = new Logger('Bootstrap');
  logger.error('üí• Erro fatal durante inicializa√ß√£o:', error);
  console.error('Stack trace completo:', error);
  process.exit(1);
});
