/**
 * Service para MobileUser
 *
 * Este service implementa toda a l칩gica de neg칩cio para usu치rios m칩veis,
 * incluindo valida칞칫es, regras de neg칩cio, criptografia de senhas e
 * integra칞칚o com o repository para persist칡ncia de dados.
 *
 * FUNCIONALIDADES:
 * - CRUD completo com valida칞칫es de neg칩cio
 * - Criptografia segura de senhas com bcrypt
 * - Valida칞칚o de unicidade de username
 * - Reset de senha com gera칞칚o autom치tica
 * - Verifica칞칚o de credenciais para autentica칞칚o
 * - Altera칞칚o de senha com valida칞칚o da senha atual
 * - Listagem paginada com filtros e busca
 *
 * SEGURAN칂A:
 * - Hash de senhas com bcrypt (salt rounds: 12)
 * - Valida칞칚o de senha atual em altera칞칫es
 * - Gera칞칚o segura de senhas aleat칩rias
 * - Exclus칚o autom치tica de senhas em retornos
 * - Valida칞칚o de unicidade para prevenir duplicatas
 *
 * REGRAS DE NEG칍CIO:
 * - Username deve ser 칰nico no sistema
 * - Senhas devem atender crit칠rios de for칞a
 * - Usu치rios n칚o podem ser exclu칤dos se tiverem sess칫es ativas
 * - Auditoria completa de todas as opera칞칫es
 * - Soft delete para preservar hist칩rico
 *
 * INTEGRA칂츾O:
 * - Usa MobileUserRepository para persist칡ncia
 * - Integra com sistema de valida칞칚o Zod
 * - Compat칤vel com Server Actions
 * - Suporte a logging autom치tico
 */

// Removendo heran칞a para simplificar
import { PaginatedParams, PaginatedResult } from '@/lib/types/common';
import { MobileUser } from '@nexa-oper/db';
import bcrypt from 'bcryptjs';
import { MobileUserRepository } from '../repositories/MobileUserRepository';
import {
  MobileUserChangePassword,
  MobileUserCreate,
  MobileUserCreateData,
  MobileUserUpdate,
  MobileUserUpdateData,
  mobileUserChangePasswordSchema,
  mobileUserCreateSchema,
  mobileUserUpdateSchema,
} from '../schemas/mobileUserSchema';

/**
 * Service para opera칞칫es de MobileUser
 *
 * Implementa regras de neg칩cio e valida칞칫es espec칤ficas
 * para usu치rios m칩veis, garantindo integridade e seguran칞a.
 */
export class MobileUserService {
  private mobileUserRepo: MobileUserRepository;

  constructor() {
    this.mobileUserRepo = new MobileUserRepository();
  }

  /**
   * Cria um novo usu치rio m칩vel
   *
   * @param rawData - Dados brutos do usu치rio m칩vel
   * @param userId - ID do usu치rio que est치 criando
   * @returns Promise com o usu치rio m칩vel criado (sem senha)
   */
  async create(rawData: MobileUserCreate, userId: string): Promise<MobileUser> {
    // Valida os dados de entrada
    const data = mobileUserCreateSchema.parse(rawData);

    // Verifica unicidade do username
    await this.validateUsernameUniqueness(data.username);

    // Hash da senha
    const hashedPassword = await this.hashPassword(data.password);

    // Prepara dados para cria칞칚o
    const createData: MobileUserCreateData = {
      username: data.username,
      password: hashedPassword,
    };

    // Cria o usu치rio m칩vel
    const newMobileUser = await this.mobileUserRepo.create(createData, userId);
    return newMobileUser;
  }

  /**
   * Atualiza um usu치rio m칩vel existente
   *
   * @param rawData - Dados de atualiza칞칚o
   * @param userId - ID do usu치rio que est치 atualizando
   * @returns Promise com o usu치rio m칩vel atualizado (sem senha)
   */
  async update(rawData: MobileUserUpdate, userId: string): Promise<MobileUser> {
    // Valida os dados de entrada
    const data = mobileUserUpdateSchema.parse(rawData);

    // Verifica se o usu치rio m칩vel existe
    const existingMobileUser = await this.mobileUserRepo.findById(data.id);
    if (!existingMobileUser) {
      throw new Error('Usu치rio m칩vel n칚o encontrado');
    }

    // Prepara dados para atualiza칞칚o
    const updateData: Partial<MobileUserUpdateData> = {};

    // Atualiza username se fornecido
    if (data.username && data.username !== existingMobileUser.username) {
      await this.validateUsernameUniqueness(data.username, data.id);
      updateData.username = data.username;
    }

    // Atualiza senha se fornecida
    if (data.password) {
      updateData.password = await this.hashPassword(data.password);
    }

    // Se n칚o h치 dados para atualizar, retorna o usu치rio atual
    if (Object.keys(updateData).length === 0) {
      return existingMobileUser;
    }

    // Atualiza o usu치rio m칩vel
    const updatedMobileUser = await this.mobileUserRepo.update(
      data.id,
      updateData,
      userId
    );
    return updatedMobileUser;
  }

  /**
   * Exclui um usu치rio m칩vel
   *
   * @param id - ID do usu치rio m칩vel a ser exclu칤do
   * @param userId - ID do usu치rio que est치 excluindo
   * @returns Promise<void>
   */
  async delete(id: number, userId: string): Promise<void> {
    // Verifica se o usu치rio m칩vel existe
    const mobileUser = await this.mobileUserRepo.findById(id);
    if (!mobileUser) {
      throw new Error('Usu치rio m칩vel n칚o encontrado');
    }

    // Exclui o usu치rio m칩vel (soft delete)
    await this.mobileUserRepo.delete(id, userId);
  }

  /**
   * Busca um usu치rio m칩vel por ID
   *
   * @param id - ID do usu치rio m칩vel
   * @returns Promise com o usu치rio m칩vel encontrado (sem senha)
   */
  async getById(id: number): Promise<MobileUser | null> {
    return await this.mobileUserRepo.findById(id);
  }

  /**
   * Lista usu치rios m칩veis com pagina칞칚o e filtros
   *
   * @param params - Par칙metros de pagina칞칚o e filtros
   * @returns Promise com resultado paginado
   */
  async list(params?: PaginatedParams): Promise<PaginatedResult<MobileUser>> {
    // Usa par칙metros padr칚o se n칚o fornecidos
    const defaultParams = {
      page: 1,
      pageSize: 10,
      ...params,
    };

    const { items, total } = await this.mobileUserRepo.list(defaultParams);
    const totalPages = Math.ceil(total / defaultParams.pageSize);

    return {
      data: items,
      total,
      totalPages,
      page: defaultParams.page,
      pageSize: defaultParams.pageSize,
    };
  }

  /**
   * Altera a senha de um usu치rio m칩vel
   *
   * @param rawData - Dados da altera칞칚o de senha
   * @param userId - ID do usu치rio que est치 alterando
   * @returns Promise<void>
   */
  async changePassword(
    rawData: MobileUserChangePassword,
    userId: string
  ): Promise<void> {
    // Valida os dados de entrada
    const data = mobileUserChangePasswordSchema.parse(rawData);

    // Busca o usu치rio m칩vel com senha para verifica칞칚o
    const mobileUser = await this.mobileUserRepo.findByUsernameWithPassword(
      (await this.mobileUserRepo.findById(data.id))?.username || ''
    );

    if (!mobileUser) {
      throw new Error('Usu치rio m칩vel n칚o encontrado');
    }

    // Verifica a senha atual
    const isCurrentPasswordValid = await this.verifyPassword(
      data.currentPassword,
      mobileUser.password
    );

    if (!isCurrentPasswordValid) {
      throw new Error('Senha atual incorreta');
    }

    // Hash da nova senha
    const hashedNewPassword = await this.hashPassword(data.newPassword);

    // Atualiza a senha
    await this.mobileUserRepo.update(
      data.id,
      { password: hashedNewPassword },
      userId
    );
  }

  /**
   * Reseta a senha de um usu치rio m칩vel
   *
   * @param data - Dados do reset (userId, sendEmail, notifyUser)
   * @param currentUserId - ID do usu치rio que est치 executando o reset
   * @returns Resultado da opera칞칚o
   */
  async resetPassword(
    data: { userId: number; sendEmail: boolean; notifyUser: boolean },
    currentUserId: string
  ): Promise<{ success: boolean; newPassword?: string; emailSent: boolean }> {
    // Verifica se o usu치rio m칩vel existe
    const mobileUser = await this.mobileUserRepo.findById(data.userId);
    if (!mobileUser) {
      throw new Error('Usu치rio m칩vel n칚o encontrado');
    }

    // Gera nova senha aleat칩ria
    const newPassword = this.generateRandomPassword();

    // Hash da nova senha
    const hashedPassword = await this.hashPassword(newPassword);

    // Atualiza a senha no banco
    await this.mobileUserRepo.update(
      data.userId,
      { password: hashedPassword },
      currentUserId
    );

    // Simula envio de notifica칞칚o (implementar integra칞칚o real conforme necess치rio)
    let emailSent = false;
    if (data.sendEmail) {
      // TODO: Implementar envio de notifica칞칚o real para dispositivos m칩veis
      console.log(
        `游님 Enviando nova senha para usu치rio m칩vel ${mobileUser.username}: ${newPassword}`
      );
      emailSent = true;
    }

    return {
      success: true,
      newPassword: data.sendEmail ? undefined : newPassword, // S칩 retorna se n칚o enviou por notifica칞칚o
      emailSent,
    };
  }

  /**
   * Verifica credenciais de um usu치rio m칩vel
   *
   * @param username - Username do usu치rio m칩vel
   * @param password - Senha do usu치rio m칩vel
   * @returns Promise com o usu치rio m칩vel se credenciais v치lidas, null caso contr치rio
   */
  async verifyCredentials(
    username: string,
    password: string
  ): Promise<MobileUser | null> {
    // Busca o usu치rio m칩vel com senha
    const mobileUser =
      await this.mobileUserRepo.findByUsernameWithPassword(username);

    if (!mobileUser) {
      return null;
    }

    // Verifica a senha
    const isPasswordValid = await this.verifyPassword(
      password,
      mobileUser.password
    );

    if (!isPasswordValid) {
      return null;
    }

    // Retorna o usu치rio m칩vel sem a senha
    const { password: _, ...mobileUserSafe } = mobileUser;
    return mobileUserSafe as MobileUser;
  }

  /**
   * Valida unicidade do username
   *
   * @param username - Username a ser validado
   * @param excludeId - ID a ser exclu칤do da valida칞칚o (para updates)
   * @throws Error se username j치 existir
   */
  private async validateUsernameUniqueness(
    username: string,
    excludeId?: number
  ): Promise<void> {
    const exists = await this.mobileUserRepo.usernameExists(
      username,
      excludeId
    );
    if (exists) {
      throw new Error('Este username j치 est치 em uso por outro usu치rio m칩vel');
    }
  }

  /**
   * Gera hash da senha usando bcrypt
   *
   * @param password - Senha em texto plano
   * @returns Promise com hash da senha
   */
  private async hashPassword(password: string): Promise<string> {
    return await bcrypt.hash(password, 12);
  }

  /**
   * Verifica se a senha fornecida corresponde ao hash
   *
   * @param password - Senha em texto plano
   * @param hash - Hash armazenado
   * @returns Promise<boolean> indicando se a senha 칠 v치lida
   */
  private async verifyPassword(
    password: string,
    hash: string
  ): Promise<boolean> {
    return await bcrypt.compare(password, hash);
  }

  /**
   * Gera uma senha aleat칩ria segura
   *
   * @returns Senha aleat칩ria com 12 caracteres
   */
  private generateRandomPassword(): string {
    const length = 12;
    const charset =
      'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789@$!%*?&';
    let password = '';

    // Garante pelo menos um de cada tipo
    password += 'abcdefghijklmnopqrstuvwxyz'[Math.floor(Math.random() * 26)]; // min칰scula
    password += 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'[Math.floor(Math.random() * 26)]; // mai칰scula
    password += '0123456789'[Math.floor(Math.random() * 10)]; // n칰mero
    password += '@$!%*?&'[Math.floor(Math.random() * 7)]; // especial

    // Preenche o restante aleatoriamente
    for (let i = 4; i < length; i++) {
      password += charset[Math.floor(Math.random() * charset.length)];
    }

    // Embaralha a senha
    return password
      .split('')
      .sort(() => Math.random() - 0.5)
      .join('');
  }

  /**
   * Define os campos que podem ser utilizados para busca
   *
   * @returns Array com os nomes dos campos de busca
   */
  protected getSearchFields(): string[] {
    return ['username'];
  }
}
