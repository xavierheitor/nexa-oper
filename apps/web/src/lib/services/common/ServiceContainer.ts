/**
 * Service Container para Inje√ß√£o de Depend√™ncia
 *
 * Este m√≥dulo implementa um container de servi√ßos para inje√ß√£o
 * de depend√™ncia, permitindo gerenciar inst√¢ncias de servi√ßos
 * de forma centralizada e test√°vel.
 *
 * FUNCIONALIDADES:
 * - Registro de servi√ßos com factory functions
 * - Resolu√ß√£o de depend√™ncias
 * - Singleton pattern para inst√¢ncias
 * - Type safety com TypeScript
 * - Suporte a inje√ß√£o de depend√™ncias
 *
 * COMO FUNCIONA:
 * 1. Registra servi√ßos com factory functions
 * 2. Resolve depend√™ncias automaticamente
 * 3. Mant√©m inst√¢ncias singleton
 * 4. Fornece acesso centralizado aos servi√ßos
 *
 * BENEF√çCIOS:
 * - Invers√£o de controle
 * - Facilita testes unit√°rios
 * - Reduz acoplamento
 * - Centraliza cria√ß√£o de objetos
 * - Melhora manutenibilidade
 *
 * EXEMPLO DE USO:
 * ```typescript
 * // Registro de servi√ßos
 * container.register('contratoService', () => new ContratoService());
 *
 * // Resolu√ß√£o de servi√ßos
 * const contratoService = container.get<ContratoService>('contratoService');
 *
 * // Uso em actions
 * const service = container.get<ContratoService>('contratoService');
 * const result = await service.create(data, userId);
 * ```
 */

/**
 * Interface para factory functions
 */
type ServiceFactory<T> = () => T;

/**
 * Interface para o container de servi√ßos
 */
interface IServiceContainer {
  register<T>(key: string, factory: ServiceFactory<T>): void;
  get<T>(key: string): T;
  has(key: string): boolean;
  clear(): void;
}

/**
 * Container de servi√ßos para inje√ß√£o de depend√™ncia
 *
 * Implementa o padr√£o Singleton e gerencia inst√¢ncias
 * de servi√ßos de forma centralizada.
 */
export class ServiceContainer implements IServiceContainer {
  private static instance: ServiceContainer;
  private services = new Map<string, ServiceFactory<any>>();
  private instances = new Map<string, any>();

  /**
   * Construtor privado para implementar Singleton
   */
  private constructor() {}

  /**
   * Obt√©m a inst√¢ncia √∫nica do container
   *
   * @returns Inst√¢ncia √∫nica do ServiceContainer
   */
  static getInstance(): ServiceContainer {
    if (!this.instance) {
      this.instance = new ServiceContainer();
    }
    return this.instance;
  }

  /**
   * Registra um servi√ßo no container
   *
   * @param key - Chave √∫nica para identificar o servi√ßo
   * @param factory - Factory function para criar o servi√ßo
   */
  register<T>(key: string, factory: ServiceFactory<T>): void {
    this.services.set(key, factory);
  }

  /**
   * Resolve um servi√ßo do container
   *
   * @param key - Chave do servi√ßo
   * @returns Inst√¢ncia do servi√ßo
   * @throws Error se o servi√ßo n√£o for encontrado
   */
  get<T>(key: string): T {
    // Verifica se j√° existe uma inst√¢ncia
    if (this.instances.has(key)) {
      return this.instances.get(key);
    }

    // Busca a factory function
    const factory = this.services.get(key);
    if (!factory) {
      throw new Error(`Service '${key}' not found. Make sure it's registered.`);
    }

    // Cria a inst√¢ncia usando a factory
    const instance = factory();

    // Armazena a inst√¢ncia para reutiliza√ß√£o (singleton)
    this.instances.set(key, instance);

    return instance;
  }

  /**
   * Verifica se um servi√ßo est√° registrado
   *
   * @param key - Chave do servi√ßo
   * @returns true se o servi√ßo est√° registrado
   */
  has(key: string): boolean {
    return this.services.has(key);
  }

  /**
   * Limpa todos os servi√ßos registrados
   * √ötil para testes ou reinicializa√ß√£o
   */
  clear(): void {
    this.services.clear();
    this.instances.clear();
  }

  /**
   * Lista todas as chaves de servi√ßos registrados
   *
   * @returns Array com as chaves dos servi√ßos
   */
  getRegisteredServices(): string[] {
    return Array.from(this.services.keys());
  }
}

/**
 * Inst√¢ncia global do container de servi√ßos
 *
 * Esta inst√¢ncia √© compartilhada em toda a aplica√ß√£o
 * e deve ser usada para registrar e resolver servi√ßos.
 */
export const container = ServiceContainer.getInstance();

/**
 * Decorator para inje√ß√£o de depend√™ncia (vers√£o simplificada)
 *
 * NOTA: Esta √© uma implementa√ß√£o b√°sica do decorator Inject.
 * Para uso em produ√ß√£o com decorators avan√ßados, considere instalar
 * e configurar a biblioteca 'reflect-metadata'.
 *
 * EXEMPLO DE USO FUTURO:
 * ```typescript
 * class ContratoController {
 *   constructor(@Inject('contratoService') private contratoService: ContratoService) {}
 * }
 * ```
 *
 * @param serviceKey - Chave do servi√ßo a ser injetado
 * @returns Decorator function
 */
export function Inject(serviceKey: string) {
  return function (
    target: any,
    propertyKey: string | symbol | undefined,
    parameterIndex: number
  ) {
    // Implementa√ß√£o simplificada sem reflect-metadata
    // Armazena metadados b√°sicos no target
    if (!target.__injectionTokens) {
      target.__injectionTokens = {};
    }
    target.__injectionTokens[parameterIndex] = serviceKey;

    console.log(
      `[ServiceContainer] üìù Decorator @Inject('${serviceKey}') registrado para par√¢metro ${parameterIndex}`
    );
  };
}
