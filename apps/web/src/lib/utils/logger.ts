/**
 * Sistema de Logging Personalizado
 *
 * Este m√≥dulo fornece um sistema completo de logging para a aplica√ß√£o,
 * incluindo diferentes n√≠veis de log, persist√™ncia em arquivos e
 * integra√ß√£o com sess√µes de usu√°rio para auditoria.
 *
 * FUNCIONALIDADES:
 * - M√∫ltiplos n√≠veis de log (info, warn, error, action, access)
 * - Persist√™ncia em arquivos (app.log e error.log)
 * - Formata√ß√£o padronizada com timestamp e contexto
 * - Logging autom√°tico de a√ß√µes de usu√°rio
 * - Separa√ß√£o de logs de erro em arquivo espec√≠fico
 * - Integra√ß√£o com NextAuth para auditoria
 *
 * COMO FUNCIONA:
 * 1. Configura diret√≥rios e arquivos de log automaticamente
 * 2. Formata logs com timestamp, n√≠vel e contexto
 * 3. Escreve logs em arquivos separados por tipo
 * 4. Fornece fun√ß√µes helper para diferentes n√≠veis
 * 5. Inclui wrapper para logging autom√°tico de a√ß√µes
 *
 * ESTRUTURA DE ARQUIVOS:
 * - ./logs/app.log - Todos os logs da aplica√ß√£o
 * - ./logs/error.log - Apenas logs de erro
 *
 * SEGURAN√áA E AUDITORIA:
 * - Logs de a√ß√µes incluem ID do usu√°rio
 * - Contexto completo de entrada e sa√≠da
 * - Rastreamento de sucesso/falha de opera√ß√µes
 * - Timestamps precisos para auditoria
 */

// Importa√ß√µes necess√°rias para o sistema de logging
import fs from 'fs'; // Sistema de arquivos do Node.js
import { Session } from 'next-auth'; // Tipos de sess√£o do NextAuth
import path from 'path'; // Utilit√°rios de caminho
import { ACTION_TYPE_LABELS } from '../types/common'; // Labels para ActionTypes

// Configura√ß√£o de caminhos de log
const logPathFromEnv = process.env.LOG_PATH || './logs'; // Caminho configur√°vel via env
const LOG_DIR = path.resolve(logPathFromEnv); // Diret√≥rio absoluto dos logs
const LOG_FILE = path.join(LOG_DIR, 'app.log'); // Arquivo principal de logs
const ERROR_LOG_FILE = path.join(LOG_DIR, 'error.log'); // Arquivo espec√≠fico para erros

// Inicializa√ß√£o autom√°tica dos arquivos de log
// Garante que o diret√≥rio e arquivos existem antes de usar
if (!fs.existsSync(LOG_DIR)) {
  fs.mkdirSync(LOG_DIR, { recursive: true }); // Cria diret√≥rio recursivamente
}
if (!fs.existsSync(LOG_FILE)) {
  fs.writeFileSync(LOG_FILE, '', 'utf8'); // Cria arquivo principal vazio
}
if (!fs.existsSync(ERROR_LOG_FILE)) {
  fs.writeFileSync(ERROR_LOG_FILE, '', 'utf8'); // Cria arquivo de erros vazio
}

/**
 * Tipos de n√≠veis de log dispon√≠veis
 *
 * - info: Informa√ß√µes gerais da aplica√ß√£o
 * - warn: Avisos que n√£o impedem funcionamento
 * - error: Erros que afetam funcionalidade
 * - action: A√ß√µes espec√≠ficas de usu√°rio (CRUD)
 * - access: Acessos e autentica√ß√µes
 */
export type LogLevel = 'info' | 'warn' | 'error' | 'action' | 'access';

/**
 * Interface para payload de log
 *
 * Define a estrutura dos dados que podem ser enviados para o logger
 */
interface LogPayload {
  level?: LogLevel; // N√≠vel do log (padr√£o: 'info')
  message: string; // Mensagem principal do log
  context?: Record<string, any>; // Contexto adicional (objeto JSON)
}

/**
 * Fun√ß√£o para formatar logs
 *
 * Cria uma string padronizada com timestamp, n√≠vel e contexto
 *
 * @param payload - Dados do log a serem formatados
 * @returns String formatada para escrita no arquivo
 */
function formatLog({ level = 'info', message, context }: LogPayload): string {
  const timestamp = new Date().toISOString(); // Timestamp ISO
  const ctx = context ? ` | ${JSON.stringify(context)}` : ''; // Contexto JSON
  return `[${timestamp}] [${level.toUpperCase()}] ${message}${ctx}`;
}

/**
 * Fun√ß√£o para escrever logs em arquivos
 *
 * Escreve o log formatado no arquivo apropriado baseado no n√≠vel
 *
 * @param line - Linha formatada para escrita
 * @param level - N√≠vel do log para determinar arquivo de destino
 */
function writeLog(line: string, level: LogLevel = 'info') {
  // Escreve sempre no arquivo principal
  fs.appendFile(LOG_FILE, line + '\n', err => {
    if (err) console.error('Erro ao escrever log:', err);
  });

  // Se for erro, escreve tamb√©m no arquivo espec√≠fico de erros
  if (level === 'error') {
    fs.appendFile(ERROR_LOG_FILE, line + '\n', err => {
      if (err) console.error('Erro ao escrever error.log:', err);
    });
  }
}

/**
 * Objeto logger principal
 *
 * Fornece m√©todos convenientes para diferentes n√≠veis de log
 * e gerencia a escrita autom√°tica em arquivos
 */
export const logger = {
  /**
   * M√©todo principal de logging
   *
   * @param payload - Dados do log a serem processados
   */
  log(payload: LogPayload) {
    const line = formatLog(payload); // Formata o log
    writeLog(line, payload.level); // Escreve no arquivo

    // Se for erro, mostra tamb√©m no console para debug
    if (payload.level === 'error') {
      console.error(line); // üî• Mostra erro tamb√©m no console
    }
  },

  // M√©todos helper para diferentes n√≠veis de log
  info: (message: string, context?: Record<string, any>) =>
    logger.log({ level: 'info', message, context }),
  warn: (message: string, context?: Record<string, any>) =>
    logger.log({ level: 'warn', message, context }),
  error: (message: string, context?: Record<string, any>) =>
    logger.log({ level: 'error', message, context }),
  action: (message: string, context?: Record<string, any>) =>
    logger.log({ level: 'action', message, context }),
  access: (message: string, context?: Record<string, any>) =>
    logger.log({ level: 'access', message, context }),
};

/**
 * Fun√ß√£o wrapper para logging autom√°tico de a√ß√µes
 *
 * Esta fun√ß√£o envolve opera√ß√µes de banco de dados e outras a√ß√µes
 * para registrar automaticamente o sucesso ou falha, incluindo
 * informa√ß√µes de auditoria como ID do usu√°rio.
 *
 * @param session - Sess√£o do usu√°rio para auditoria
 * @param actionType - Tipo da a√ß√£o (create, update, delete, get, list)
 * @param entity - Nome da entidade sendo manipulada
 * @param input - Dados de entrada da opera√ß√£o
 * @param logic - Fun√ß√£o que executa a l√≥gica real
 * @returns Resultado da opera√ß√£o ou lan√ßa erro
 */
export async function withLogging<T>(
  session: Session,
  actionType: string, // Aceita qualquer string para flexibilidade total
  entity: string,
  input: unknown,
  logic: () => Promise<T>
): Promise<T> {
  // Usa label amig√°vel ou o tipo original
  const actionLabel = ACTION_TYPE_LABELS[actionType] || actionType;

  try {
    // Executa a l√≥gica real
    const result = await logic();

    // Log de sucesso com contexto completo
    logger.action(`[${actionLabel.toUpperCase()}] ${entity}`, {
      userId: session.user.id, // ID do usu√°rio para auditoria
      actionType, // Tipo original da a√ß√£o
      input, // Dados de entrada
      output: result, // Resultado da opera√ß√£o
      success: true, // Flag de sucesso
    });

    return result;
  } catch (error) {
    // Log de erro com contexto de falha
    logger.error(`[${actionLabel.toUpperCase()}] ${entity} FAILED`, {
      userId: session.user.id, // ID do usu√°rio para auditoria
      actionType, // Tipo original da a√ß√£o
      input, // Dados de entrada que causaram erro
      success: false, // Flag de falha
      error: error instanceof Error ? error.message : String(error), // Mensagem de erro
    });

    // Re-lan√ßa o erro para n√£o quebrar o fluxo da aplica√ß√£o
    throw error;
  }
}

// TODO: Implementar hook useLogger para componentes React
// TODO: Migrar todos os tipos e defini√ß√µes para uma pasta types
// TODO: Adicionar documenta√ß√£o de arquitetura do sistema de logging
