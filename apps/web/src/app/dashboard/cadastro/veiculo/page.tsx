'use client';

import { useState } from 'react';

// Importa√ß√µes das Server Actions espec√≠ficas do ve√≠culo
import { createVeiculo } from '@/lib/actions/veiculo/create';
import { deleteVeiculo } from '@/lib/actions/veiculo/delete';
import { listVeiculos } from '@/lib/actions/veiculo/list';
import { transferVeiculoBase } from '@/lib/actions/veiculo/transferBase';
import { updateVeiculo } from '@/lib/actions/veiculo/update';

// Importa√ß√µes dos hooks e utilit√°rios da aplica√ß√£o
import { unwrapFetcher } from '@/lib/db/helpers/unrapFetcher';
import { unwrapPaginatedFetcher } from '@/lib/db/helpers/unwrapPaginatedFetcher';
import { useCrudController } from '@/lib/hooks/useCrudController';
import { useEntityData } from '@/lib/hooks/useEntityData';
import { useTableColumnsWithActions } from '@/lib/hooks/useTableColumnsWithActions';

// Importa√ß√µes de tipos e utilit√°rios
import { ActionResult } from '@/lib/types/common';
import TransferBaseModal from '@/ui/components/TransferBaseModal';
import { getTextFilter } from '@/ui/components/tableFilters';
import TableExternalFilters from '@/ui/components/TableExternalFilters';

// Importa√ß√µes do Prisma e Ant Design
import { Base, Veiculo } from '@nexa-oper/db';
import { App, Button, Card, Modal, Table, Tag, Space } from 'antd';
import { SwapOutlined } from '@ant-design/icons';

// Importa√ß√£o dos formul√°rios locais
import VeiculoForm, { VeiculoFormData } from './form';
import VeiculoLoteForm from './lote-form';
import { listContratos } from '@/lib/actions/contrato/list';
import { listBases } from '@/lib/actions/base/list';
import { listTiposVeiculo } from '@/lib/actions/tipoVeiculo/list';

type VeiculoWithBase = Veiculo & { baseAtual?: Base | null };

export default function VeiculoPage() {
  // Hook para controlar opera√ß√µes CRUD (modal, loading, execu√ß√£o de a√ß√µes)
  // O par√¢metro 'veiculos' √© a chave usada para revalidar o cache SWR
  const controller = useCrudController<VeiculoWithBase>('veiculos');
  const { message } = App.useApp();
  const [transferTarget, setTransferTarget] = useState<VeiculoWithBase | null>(null);
  const [isTransferLoading, setIsTransferLoading] = useState(false);
  const [isLoteModalOpen, setIsLoteModalOpen] = useState(false);


  // Hook para gerenciar dados da tabela com pagina√ß√£o, ordena√ß√£o e filtros
  const veiculos = useEntityData<VeiculoWithBase>({
    key: 'veiculos', // Chave √∫nica para o cache SWR
    fetcherAction: unwrapPaginatedFetcher(listVeiculos), // Fun√ß√£o que busca os dados (Server Action)
    paginationEnabled: true, // Habilita pagina√ß√£o
    initialParams: {
      page: 1, // P√°gina inicial
      pageSize: 10, // Itens por p√°gina
      orderBy: 'id', // Campo para ordena√ß√£o inicial
      orderDir: 'desc', // Dire√ß√£o da ordena√ß√£o (mais recentes primeiro)
      // üöÄ INCLUDES DIN√ÇMICOS - Configure quais relacionamentos trazer
      include: {
        tipoVeiculo: true, // Inclui dados do tipo de ve√≠culo
        contrato: true,    // Inclui dados do contrato
        // Exemplos de includes aninhados (se necess√°rio):
        // contrato: {
        //   include: {
        //     cliente: true // Incluiria o cliente do contrato tamb√©m
        //   }
        // }
      },
    },
  });

  // Carregar dados para o formul√°rio em lote
  const { data: contratos } = useEntityData({
    key: 'contratos-lote',
    fetcherAction: async () => {
      const result = await listContratos({
        page: 1,
        pageSize: 100,
        orderBy: 'nome',
        orderDir: 'asc',
      });
      return result.success && result.data ? result.data.data : [];
    },
    paginationEnabled: false,
  });

  const { data: bases } = useEntityData({
    key: 'bases-lote',
    fetcherAction: async () => {
      const result = await listBases({
        page: 1,
        pageSize: 100,
        orderBy: 'nome',
        orderDir: 'asc',
      });
      return result.success && result.data ? result.data.data : [];
    },
    paginationEnabled: false,
  });

  const { data: tiposVeiculo } = useEntityData({
    key: 'tipos-veiculo-lote',
    fetcherAction: async () => {
      const result = await listTiposVeiculo({
        page: 1,
        pageSize: 100,
        orderBy: 'nome',
        orderDir: 'asc',
      });
      return result.success && result.data ? result.data.data : [];
    },
    paginationEnabled: false,
  });

  // Configura√ß√£o das colunas da tabela com a√ß√µes integradas
  const columns = useTableColumnsWithActions<VeiculoWithBase>(
    [
      // Coluna ID - simples, apenas para refer√™ncia
      {
        title: 'ID',
        dataIndex: 'id', // Campo do objeto Veiculo
        key: 'id', // Chave √∫nica da coluna
        sorter: true, // Habilita ordena√ß√£o por esta coluna
        width: 80, // Largura fixa da coluna
      },
      // Coluna Placa - com filtro de texto integrado
      {
        title: 'Placa',
        dataIndex: 'placa',
        key: 'placa',
        sorter: true, // Permite ordena√ß√£o
        ...getTextFilter<VeiculoWithBase>('placa', 'placa do ve√≠culo'), // Adiciona filtro de busca textual
        render: (placa: string) => (
          <Tag color="blue" style={{ fontFamily: 'monospace', fontSize: '12px' }}>
            {placa}
          </Tag>
        ), // Estiliza a placa como tag
        width: 120,
      },
      // Coluna Modelo - com filtro de texto integrado
      {
        title: 'Modelo',
        dataIndex: 'modelo',
        key: 'modelo',
        sorter: true,
        ...getTextFilter<VeiculoWithBase>('modelo', 'modelo do ve√≠culo'),
      },
      // Coluna Ano
      {
        title: 'Ano',
        dataIndex: 'ano',
        key: 'ano',
        sorter: true,
        width: 80,
        render: (ano: number) => ano?.toString() || '-',
      },
      // Coluna Tipo de Ve√≠culo - relacionamento
      {
        title: 'Tipo',
        dataIndex: ['tipoVeiculo', 'nome'], // Acessa o campo nome do relacionamento tipoVeiculo
        key: 'tipoVeiculo',
        sorter: true,
        render: (nome: string) => nome || '-',
        width: 120,
      },
      // Coluna Contrato - relacionamento
      {
        title: 'Contrato',
        dataIndex: ['contrato', 'nome'], // Acessa o campo nome do relacionamento contrato
        key: 'contrato',
        render: (nome: string, record: Veiculo) => {
          // Mostra nome e n√∫mero do contrato se dispon√≠vel
          const contrato = (record as any).contrato;
          return contrato ? `${contrato.nome} (${contrato.numero})` : '-';
        },
        width: 200,
      },
      // Coluna Base Atual
      {
        title: 'Base Atual',
        dataIndex: 'baseAtual',
        key: 'baseAtual',
        render: (baseAtual: any) => {
          return baseAtual ? (
            <Tag color="green">{baseAtual.nome}</Tag>
          ) : (
            <Tag color="red">Sem lota√ß√£o</Tag>
          );
        },
        width: 120,
      },
      // Coluna Data de Cria√ß√£o - formatada para exibi√ß√£o
      {
        title: 'Criado em',
        dataIndex: 'createdAt',
        key: 'createdAt',
        sorter: true,
        render: (date: Date) => new Date(date).toLocaleDateString('pt-BR'), // Formata data para padr√£o brasileiro
        width: 120,
      },
    ],
    // Configura√ß√£o das a√ß√µes da tabela (bot√µes Editar/Excluir/Transferir)
    {
      // A√ß√£o de edi√ß√£o - abre o modal com o item selecionado
      onEdit: controller.open,

      // A√ß√£o de exclus√£o - executa a Server Action de delete
      onDelete: (item) =>
        controller
          .exec(
            () => deleteVeiculo({ id: item.id }), // Server Action de exclus√£o
            'Ve√≠culo exclu√≠do com sucesso!' // Mensagem de sucesso
          )
          .finally(() => {
            veiculos.mutate(); // Revalida os dados da tabela ap√≥s exclus√£o
          }),

      // A√ß√µes customizadas
      customActions: [
        {
          key: 'transfer-base',
          label: 'Transferir Base',
          type: 'link',
          icon: <SwapOutlined />,
          tooltip: 'Transferir ve√≠culo para outra base',
          onClick: (record) => {
            setTransferTarget(record);
          },
        },
      ],
    },
  );

  // Fun√ß√£o que processa o submit do formul√°rio (tanto cria√ß√£o quanto edi√ß√£o)
  const handleSubmit = async (values: VeiculoFormData) => {
    // Cria uma a√ß√£o ass√≠ncrona que ser√° executada pelo controller
    const action = async (): Promise<ActionResult<Veiculo>> => {
      const payload = {
        ...values,
        tipoVeiculoId: Number(values.tipoVeiculoId),
        contratoId: Number(values.contratoId),
        baseId: Number(values.baseId),
      };

      // Verifica se estamos editando (tem item selecionado) ou criando
      const result = controller.editingItem?.id
        ? await updateVeiculo({
          ...payload, // Dados do formul√°rio normalizados
          id: controller.editingItem.id, // ID do item sendo editado
        })
        : await createVeiculo(payload); // Apenas dados do formul√°rio para cria√ß√£o

      // Retorna o resultado original do backend (n√£o sobrescrever success!)
      return result;
    };

    // Executa a a√ß√£o atrav√©s do controller (gerencia loading, notifica√ß√µes, etc.)
    controller.exec(action, 'Ve√≠culo salvo com sucesso!').finally(() => {
      veiculos.mutate(); // Revalida os dados da tabela ap√≥s salvar
    });
  };

  const closeTransferModal = () => {
    if (isTransferLoading) {
      return;
    }
    setTransferTarget(null);
  };

  const handleTransferBase = async ({ novaBaseId, motivo }: { novaBaseId: number; motivo?: string }) => {
    if (!transferTarget) {
      return;
    }

    setIsTransferLoading(true);

    try {
      const result = await transferVeiculoBase({
        veiculoId: transferTarget.id,
        novaBaseId: Number(novaBaseId),
        motivo,
      });

      if (!result.success) {
        throw new Error(result.error || 'N√£o foi poss√≠vel transferir a base.');
      }

      message.success('Ve√≠culo transferido com sucesso!');
      setTransferTarget(null);
      veiculos.mutate();
    } catch (error) {
      const normalizedError =
        error instanceof Error ? error : new Error('Erro ao transferir base do ve√≠culo.');

      message.error(normalizedError.message);
      throw normalizedError;
    } finally {
      setIsTransferLoading(false);
    }
  };


  // Tratamento de erro - exibe mensagem se houver problema ao carregar dados
  if (veiculos.error) {
    return <p style={{ color: 'red' }}>Erro ao carregar ve√≠culos.</p>;
  }

  // Renderiza√ß√£o do componente
  return (
    <>
      {/* Card principal que cont√©m a tabela */}
      <Card
        title="Ve√≠culos" // T√≠tulo do card
        extra={
          // Bot√µes no canto superior direito
          <Space>
            <Button onClick={() => setIsLoteModalOpen(true)}>
              Cadastro em Lote
            </Button>
            <Button type="primary" onClick={() => controller.open()}>
              Adicionar
            </Button>
          </Space>
        }
      >
        {/* Filtros externos (server-side) */}
        <TableExternalFilters
          filters={[
            {
              label: 'Base',
              placeholder: 'Filtrar por base',
              options: [
                { label: 'Sem lota√ß√£o', value: -1 },
                ...(bases?.map(base => ({
                  label: base.nome,
                  value: base.id,
                })) || []),
              ],
              onChange: (baseId) =>
                veiculos.setParams(prev => ({ ...prev, baseId, page: 1 })),
            },
            {
              label: 'Tipo',
              placeholder: 'Filtrar por tipo',
              options: tiposVeiculo?.map(tipo => ({
                label: tipo.nome,
                value: tipo.id,
              })) || [],
              onChange: (tipoVeiculoId) =>
                veiculos.setParams(prev => ({ ...prev, tipoVeiculoId, page: 1 })),
            },
          ]}
        />

        {/* Tabela principal com dados dos ve√≠culos */}
        <Table<VeiculoWithBase>
          columns={columns} // Colunas configuradas acima
          dataSource={veiculos.data} // Dados vindos do useEntityData
          loading={veiculos.isLoading} // Estado de loading
          rowKey="id" // Campo √∫nico para identificar cada linha
          pagination={veiculos.pagination} // Configura√ß√£o de pagina√ß√£o
          onChange={veiculos.handleTableChange} // Handler para mudan√ßas (pagina√ß√£o, filtros, ordena√ß√£o)
          scroll={{ x: 1000 }} // Habilita scroll horizontal se necess√°rio
        />
      </Card>

      {/* Modal para cria√ß√£o/edi√ß√£o de ve√≠culos */}
      <Modal
        title={controller.editingItem ? 'Editar Ve√≠culo' : 'Novo Ve√≠culo'} // T√≠tulo din√¢mico
        open={controller.isOpen} // Controla se o modal est√° aberto
        onCancel={controller.close} // Fun√ß√£o para fechar o modal
        footer={null} // Remove footer padr√£o (bot√µes OK/Cancel)
        destroyOnHidden // Destr√≥i o conte√∫do quando oculto (limpa estado)
        width={700} // Largura do modal (maior que tipo ve√≠culo pois tem mais campos)
      >
        {/* Formul√°rio dentro do modal */}
        <VeiculoForm
          initialValues={controller.editingItem
            ? {
              placa: controller.editingItem.placa,
              modelo: controller.editingItem.modelo,
              ano: controller.editingItem.ano,
              tipoVeiculoId: controller.editingItem.tipoVeiculoId,
              contratoId: controller.editingItem.contratoId,
              baseId: controller.editingItem.baseAtual?.id,
            }
            : undefined} // Se criando, deixa campos vazios
          onSubmit={handleSubmit} // Fun√ß√£o que processa o submit
          loading={controller.loading} // Estado de loading para desabilitar bot√µes
        />
      </Modal>

      <TransferBaseModal
        open={!!transferTarget}
        onClose={closeTransferModal}
        onTransfer={handleTransferBase}
        title={transferTarget ? `Transferir ${transferTarget.placa}` : 'Transferir Base'}
        loading={isTransferLoading}
      />

      {/* Modal de Cadastro em Lote */}
      <Modal
        title="Cadastro de Ve√≠culos em Lote"
        open={isLoteModalOpen}
        onCancel={() => setIsLoteModalOpen(false)}
        footer={null}
        width={1000}
        destroyOnHidden
      >
        <VeiculoLoteForm
          contratos={contratos || []}
          bases={bases || []}
          tiposVeiculo={tiposVeiculo || []}
          onSuccess={() => {
            setIsLoteModalOpen(false);
            veiculos.mutate();
          }}
        />
      </Modal>

    </>
  );
}
