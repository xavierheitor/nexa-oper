// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// From models/apr.prisma
model Apr {
  id   Int    @id @default(autoincrement())
  nome String @db.VarChar(255)

  createdAt DateTime  @default(now())
  createdBy String    @db.VarChar(255)
  updatedAt DateTime? @updatedAt
  updatedBy String?   @db.VarChar(255)
  deletedAt DateTime?
  deletedBy String?   @db.VarChar(255)

  AprPerguntaRelacao      AprPerguntaRelacao[]
  AprOpcaoRespostaRelacao AprOpcaoRespostaRelacao[]
  AprTipoAtividadeRelacao AprTipoAtividadeRelacao[]
}

model AprPergunta {
  id   Int    @id @default(autoincrement())
  nome String @db.VarChar(255)

  createdAt DateTime  @default(now())
  createdBy String    @db.VarChar(255)
  updatedAt DateTime? @updatedAt
  updatedBy String?   @db.VarChar(255)
  deletedAt DateTime?
  deletedBy String?   @db.VarChar(255)

  AprPerguntaRelacao AprPerguntaRelacao[]
}

model AprPerguntaRelacao {
  id Int @id @default(autoincrement())

  aprPerguntaId Int
  aprPergunta   AprPergunta @relation(fields: [aprPerguntaId], references: [id])

  ordem Int @default(0)

  aprId Int
  apr   Apr @relation(fields: [aprId], references: [id])

  createdAt DateTime  @default(now())
  createdBy String    @db.VarChar(255)
  updatedAt DateTime? @updatedAt
  updatedBy String?   @db.VarChar(255)
  deletedAt DateTime?
  deletedBy String?   @db.VarChar(255)
}

model AprOpcaoResposta {
  id   Int    @id @default(autoincrement())
  nome String @db.VarChar(255)

  createdAt DateTime  @default(now())
  createdBy String    @db.VarChar(255)
  updatedAt DateTime? @updatedAt
  updatedBy String?   @db.VarChar(255)
  deletedAt DateTime?
  deletedBy String?   @db.VarChar(255)

  AprOpcaoRespostaRelacao AprOpcaoRespostaRelacao[]
}

model AprOpcaoRespostaRelacao {
  id Int @id @default(autoincrement())

  aprOpcaoRespostaId Int
  aprOpcaoResposta   AprOpcaoResposta @relation(fields: [aprOpcaoRespostaId], references: [id])

  aprId Int
  apr   Apr @relation(fields: [aprId], references: [id])

  createdAt DateTime  @default(now())
  createdBy String    @db.VarChar(255)
  updatedAt DateTime? @updatedAt
  updatedBy String?   @db.VarChar(255)
  deletedAt DateTime?
  deletedBy String?   @db.VarChar(255)
}

model AprTipoAtividadeRelacao {
  id Int @id @default(autoincrement())

  aprId Int
  apr   Apr @relation(fields: [aprId], references: [id])

  tipoAtividadeId Int
  tipoAtividade   TipoAtividade @relation(fields: [tipoAtividadeId], references: [id])

  createdAt DateTime  @default(now())
  createdBy String    @db.VarChar(255)
  updatedAt DateTime? @updatedAt
  updatedBy String?   @db.VarChar(255)
  deletedAt DateTime?
  deletedBy String?   @db.VarChar(255)

  // Índice único condicional: apenas um apr ativo por tipo de atividade
  @@unique([tipoAtividadeId, deletedAt], map: "unique_active_apr_tipo_atividade")
}

// From models/atividade.prisma
model TipoAtividade {
  id   Int    @id @default(autoincrement())
  nome String @db.VarChar(255)

  AprTipoAtividadeRelacao AprTipoAtividadeRelacao[]

  createdAt DateTime  @default(now())
  createdBy String    @db.VarChar(255)
  updatedAt DateTime? @updatedAt
  updatedBy String?   @db.VarChar(255)
  deletedAt DateTime?
  deletedBy String?   @db.VarChar(255)
}

// From models/auth_mobile.prisma
model MobileUser {
  id       Int    @id @default(autoincrement())
  username String @unique @db.VarChar(255)
  password String @db.VarChar(255)

  createdAt DateTime  @default(now())
  createdBy String    @db.VarChar(255)
  updatedAt DateTime? @updatedAt
  updatedBy String?   @db.VarChar(255)
  deletedAt DateTime?
  deletedBy String?   @db.VarChar(255)

  mobileSession MobileSession[]

  MobileToken MobileToken[]

  MobileContratoPermissao MobileContratoPermissao[]
}

model MobileSession {
  id         String   @id @default(uuid())
  deviceInfo String?  @db.Text
  lastActive DateTime @default(now())
  createdAt  DateTime @default(now())
  expiresAt  DateTime
  ativa      Boolean  @default(true)

  mobileUserId Int
  mobileUser   MobileUser @relation(fields: [mobileUserId], references: [id])

  @@index([mobileUserId])
  @@map("sessoes_mobile")
}

model MobileToken {
  id                    Int       @id @default(autoincrement())
  token                 String    @unique @db.VarChar(255)
  refreshToken          String?   @unique @db.VarChar(255)
  refreshTokenExpiresAt DateTime?
  usuarioMobileId       String
  expiresAt             DateTime
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  revoked               Boolean   @default(false)

  mobileUserId Int
  mobileUser   MobileUser @relation(fields: [mobileUserId], references: [id])

  @@index([mobileUserId])
  @@map("tokens_mobile")
}

// From models/auth_web.prisma
model User {
  id       Int    @id @default(autoincrement())
  nome     String @db.VarChar(255)
  email    String @unique @db.VarChar(255)
  username String @unique @db.VarChar(255)
  password String @db.VarChar(255)

  createdAt DateTime  @default(now())
  createdBy String    @db.VarChar(255)
  updatedAt DateTime? @updatedAt
  updatedBy String?   @db.VarChar(255)
  deletedAt DateTime?
  deletedBy String?   @db.VarChar(255)

  Session  Session[]
  Account  Account[]
  RoleUser RoleUser[]

  @@index([username])
  @@index([email])
}

model Account {
  id                String  @id @default(uuid())
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("contas")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  expires      DateTime

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessoes")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("tokens_verificacao")
}

model Role {
  id   Int    @id @default(autoincrement())
  nome String @db.VarChar(255)

  createdAt DateTime  @default(now())
  createdBy String    @db.VarChar(255)
  updatedAt DateTime? @updatedAt
  updatedBy String?   @db.VarChar(255)

  RoleUser RoleUser[]
}

model RoleUser {
  id Int @id @default(autoincrement())

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  roleId Int
  role   Role @relation(fields: [roleId], references: [id], onDelete: Cascade)
}

// From models/base.prisma
model Base {
  id   Int    @id @default(autoincrement())
  nome String @db.VarChar(255)

  contratoId Int
  contrato   Contrato @relation(fields: [contratoId], references: [id])

  createdAt DateTime  @default(now())
  createdBy String    @db.VarChar(255)
  updatedAt DateTime? @updatedAt
  updatedBy String?   @db.VarChar(255)
  deletedAt DateTime?
  deletedBy String?   @db.VarChar(255)

  // Relacionamentos com históricos
  EletricistaBaseHistorico EletricistaBaseHistorico[]
  VeiculoBaseHistorico     VeiculoBaseHistorico[]
}

// From models/checklist.prisma
model TipoChecklist {
  id   Int    @id @default(autoincrement())
  nome String @db.VarChar(255)

  createdAt DateTime  @default(now())
  createdBy String    @db.VarChar(255)
  updatedAt DateTime? @updatedAt
  updatedBy String?   @db.VarChar(255)
  deletedAt DateTime?
  deletedBy String?   @db.VarChar(255)

  Checklist Checklist[]

  ChecklistTipoEquipeRelacao ChecklistTipoEquipeRelacao[]
}

model Checklist {
  id   Int    @id @default(autoincrement())
  nome String @db.VarChar(255)

  tipoChecklistId Int
  tipoChecklist   TipoChecklist @relation(fields: [tipoChecklistId], references: [id])

  createdAt DateTime  @default(now())
  createdBy String    @db.VarChar(255)
  updatedAt DateTime? @updatedAt
  updatedBy String?   @db.VarChar(255)
  deletedAt DateTime?
  deletedBy String?   @db.VarChar(255)

  ChecklistPerguntaRelacao      ChecklistPerguntaRelacao[]
  ChecklistOpcaoRespostaRelacao ChecklistOpcaoRespostaRelacao[]
  ChecklistTipoVeiculoRelacao   ChecklistTipoVeiculoRelacao[]
  ChecklistTipoEquipeRelacao    ChecklistTipoEquipeRelacao[]
}

model ChecklistPergunta {
  id   Int    @id @default(autoincrement())
  nome String @db.VarChar(255)

  createdAt DateTime  @default(now())
  createdBy String    @db.VarChar(255)
  updatedAt DateTime? @updatedAt
  updatedBy String?   @db.VarChar(255)
  deletedAt DateTime?
  deletedBy String?   @db.VarChar(255)

  ChecklistPerguntaRelacao ChecklistPerguntaRelacao[]
}

model ChecklistPerguntaRelacao {
  id Int @id @default(autoincrement())

  checklistPerguntaId Int
  checklistPergunta   ChecklistPergunta @relation(fields: [checklistPerguntaId], references: [id])

  checklistId Int
  checklist   Checklist @relation(fields: [checklistId], references: [id])

  createdAt DateTime  @default(now())
  createdBy String    @db.VarChar(255)
  updatedAt DateTime? @updatedAt
  updatedBy String?   @db.VarChar(255)
  deletedAt DateTime?
  deletedBy String?   @db.VarChar(255)
}

model ChecklistOpcaoResposta {
  id   Int    @id @default(autoincrement())
  nome String @db.VarChar(255)

  geraPendencia Boolean @default(false)

  checklistOpcaoRespostaRelacao ChecklistOpcaoRespostaRelacao[]

  createdAt DateTime  @default(now())
  createdBy String    @db.VarChar(255)
  updatedAt DateTime? @updatedAt
  updatedBy String?   @db.VarChar(255)
  deletedAt DateTime?
  deletedBy String?   @db.VarChar(255)
}

model ChecklistOpcaoRespostaRelacao {
  id Int @id @default(autoincrement())

  checklistOpcaoRespostaId Int
  checklistOpcaoResposta   ChecklistOpcaoResposta @relation(fields: [checklistOpcaoRespostaId], references: [id])

  checklistId Int
  checklist   Checklist @relation(fields: [checklistId], references: [id])

  createdAt DateTime  @default(now())
  createdBy String    @db.VarChar(255)
  updatedAt DateTime? @updatedAt
  updatedBy String?   @db.VarChar(255)
  deletedAt DateTime?
  deletedBy String?   @db.VarChar(255)
}

model ChecklistTipoVeiculoRelacao {
  id Int @id @default(autoincrement())

  checklistId Int
  checklist   Checklist @relation(fields: [checklistId], references: [id])

  tipoVeiculoId Int
  tipoVeiculo   TipoVeiculo @relation(fields: [tipoVeiculoId], references: [id])

  createdAt DateTime  @default(now())
  createdBy String    @db.VarChar(255)
  updatedAt DateTime? @updatedAt
  updatedBy String?   @db.VarChar(255)
  deletedAt DateTime?
  deletedBy String?   @db.VarChar(255)

  // Índice único condicional: apenas um checklist ativo por tipo de veículo
  @@unique([tipoVeiculoId, deletedAt], map: "unique_active_checklist_tipo_veiculo")
}

model ChecklistTipoEquipeRelacao {
  id Int @id @default(autoincrement())

  checklistId Int
  checklist   Checklist @relation(fields: [checklistId], references: [id])

  tipoEquipeId Int
  tipoEquipe   TipoEquipe @relation(fields: [tipoEquipeId], references: [id])

  // NOVO CAMPO: referência direta ao tipo de checklist
  tipoChecklistId Int
  tipoChecklist   TipoChecklist @relation(fields: [tipoChecklistId], references: [id])

  createdAt DateTime  @default(now())
  createdBy String    @db.VarChar(255)
  updatedAt DateTime? @updatedAt
  updatedBy String?   @db.VarChar(255)
  deletedAt DateTime?
  deletedBy String?   @db.VarChar(255)

  // UNIQUE KEY: permite múltiplos checklists por tipo de equipe,
  // mas não permite checklists do mesmo tipo ativos simultaneamente
  @@unique([tipoEquipeId, tipoChecklistId, deletedAt], map: "unique_active_checklist_tipo_por_equipe")
}

// From models/contrato.prisma
model Contrato {
  id     Int    @id @default(autoincrement())
  nome   String @db.VarChar(255)
  numero String @db.VarChar(255)

  dataInicio DateTime?
  dataFim    DateTime?

  createdAt DateTime  @default(now())
  createdBy String    @db.VarChar(255)
  updatedAt DateTime? @updatedAt
  updatedBy String?   @db.VarChar(255)
  deletedAt DateTime?
  deletedBy String?   @db.VarChar(255)

  Veiculo Veiculo[]

  Eletricista Eletricista[]

  Equipe Equipe[]

  Supervisor Supervisor[]

  MobileContratoPermissao MobileContratoPermissao[]

  Base Base[]

  Escala Escala[]
}

model MobileContratoPermissao {
  id Int @id @default(autoincrement())

  contratoId Int
  contrato   Contrato @relation(fields: [contratoId], references: [id])

  mobileUserId Int
  mobileUser   MobileUser @relation(fields: [mobileUserId], references: [id])

  createdAt DateTime  @default(now())
  createdBy String    @db.VarChar(255)
  updatedAt DateTime? @updatedAt
  updatedBy String?   @db.VarChar(255)
  deletedAt DateTime?
  deletedBy String?   @db.VarChar(255)
}

// From models/eletricista-base-historico.prisma
/**
 * Modelo para Histórico de Bases de Eletricistas
 * Este modelo rastreia todas as transferências de eletricistas entre bases,
 * mantendo um histórico completo de onde cada eletricista esteve e quando.
 * CASOS DE USO:
 * - Rastrear transferências de eletricistas entre bases
 * - Auditoria de movimentações
 * - Relatórios de histórico de bases
 * - Controle de localização atual e passada
 */

model EletricistaBaseHistorico {
  id Int @id @default(autoincrement())

  // Relacionamentos principais
  eletricistaId Int
  eletricista   Eletricista @relation(fields: [eletricistaId], references: [id])

  baseId Int
  base   Base @relation(fields: [baseId], references: [id])

  // Controle de período
  dataInicio DateTime // Quando o eletricista chegou nesta base
  dataFim    DateTime? // Quando o eletricista saiu desta base (null = ainda está na base)

  // Motivo da transferência
  motivo String? @db.VarChar(500) // Motivo da transferência (opcional)

  // Auditoria
  createdAt DateTime  @default(now())
  createdBy String    @db.VarChar(255)
  updatedAt DateTime? @updatedAt
  updatedBy String?   @db.VarChar(255)
  deletedAt DateTime?
  deletedBy String?   @db.VarChar(255)

  // Índices para performance
  @@index([eletricistaId])
  @@index([baseId])
  @@index([dataInicio])
  @@index([dataFim])
  @@index([eletricistaId, dataInicio])
}

// From models/eletricista.prisma
model Eletricista {
  id        Int    @id @default(autoincrement())
  nome      String @db.VarChar(255)
  matricula String @db.VarChar(255)
  telefone  String @db.VarChar(255)
  estado    String @db.VarChar(2)

  createdAt DateTime  @default(now())
  createdBy String    @db.VarChar(255)
  updatedAt DateTime? @updatedAt
  updatedBy String?   @db.VarChar(255)
  deletedAt DateTime?
  deletedBy String?   @db.VarChar(255)

  contratoId Int
  contrato   Contrato @relation(fields: [contratoId], references: [id])

  TurnoEletricistas        TurnoEletricista[]
  EletricistaBaseHistorico EletricistaBaseHistorico[]
  EscalaAlocacao           EscalaAlocacao[]
}

// From models/equipe.prisma
model TipoEquipe {
  id   Int    @id @default(autoincrement())
  nome String @db.VarChar(255)

  createdAt DateTime  @default(now())
  createdBy String    @db.VarChar(255)
  updatedAt DateTime? @updatedAt
  updatedBy String?   @db.VarChar(255)
  deletedAt DateTime?
  deletedBy String?   @db.VarChar(255)

  Equipe                     Equipe[]
  ChecklistTipoEquipeRelacao ChecklistTipoEquipeRelacao[]
}

model Equipe {
  id   Int    @id @default(autoincrement())
  nome String @db.VarChar(255)

  tipoEquipeId Int
  tipoEquipe   TipoEquipe @relation(fields: [tipoEquipeId], references: [id])

  contratoId Int
  contrato   Contrato @relation(fields: [contratoId], references: [id])

  createdAt DateTime  @default(now())
  createdBy String    @db.VarChar(255)
  updatedAt DateTime? @updatedAt
  updatedBy String?   @db.VarChar(255)
  deletedAt DateTime?
  deletedBy String?   @db.VarChar(255)

  EquipeSupervisor EquipeSupervisor[]

  Turno Turno[]
}

model EquipeSupervisor {
  id Int @id @default(autoincrement())

  equipeId Int
  equipe   Equipe @relation(fields: [equipeId], references: [id])

  supervisorId Int
  supervisor   Supervisor @relation(fields: [supervisorId], references: [id])

  inicio DateTime
  fim    DateTime?

  createdAt DateTime  @default(now())
  createdBy String    @db.VarChar(255)
  updatedAt DateTime? @updatedAt
  updatedBy String?   @db.VarChar(255)
  deletedAt DateTime?
  deletedBy String?   @db.VarChar(255)
}

// From models/escala.prisma
/// Enumerates the supported vehicle groups to better dimension the crew size.
enum EscalaVeiculoTipo {
  /// Passenger vehicles (cars, SUVs etc.).
  CARRO
  /// Utility trucks that usually demand bigger crews.
  CAMINHAO
  /// Generic bucket for any other asset category.
  OUTRO
}

/// Shift scale template that defines the rotation rules for each team.
model Escala {
  /// Unique identifier of the shift scale.
  id        Int     @id @default(autoincrement())
  /// Name displayed in the administrative panels (e.g. "Escala Espanhola").
  nome      String  @db.VarChar(191)
  /// Optional description where coordinators can highlight nuances.
  descricao String? @db.Text
  /// Optional unique code used for integrations or spreadsheets.
  codigo    String? @unique @db.VarChar(64)

  /// Defines the default contract associated with the scale for permission checks.
  contratoId Int
  contrato   Contrato @relation(fields: [contratoId], references: [id])

  /// Specifies the recommended vehicle type for this roster (car, truck...).
  tipoVeiculo        EscalaVeiculoTipo?
  /// Number of days that compose the full cycle. Example: 14 for the Spanish schedule.
  diasCiclo          Int
  /// Minimum electricians required to open a shift that follows this schedule.
  minimoEletricistas Int
  /// Optional maximum electricians allowed when opening a shift.
  maximoEletricistas Int?
  /// Anchor date that marks the beginning of the rotation cycle.
  inicioCiclo        DateTime
  /// Flag controlling if the scale is still active/available to the operation team.
  ativo              Boolean            @default(true)

  /// Audit fields reused by every administrative record.
  createdAt DateTime  @default(now())
  createdBy String    @db.VarChar(255)
  updatedAt DateTime? @updatedAt
  updatedBy String?   @db.VarChar(255)
  deletedAt DateTime?
  deletedBy String?   @db.VarChar(255)

  /// Daily/slot definitions that compose the cycle.
  horarios EscalaHorario[]

  @@index([contratoId])
  @@index([ativo])
}

/// Detailed slot within the scale cycle (equivalent to a working day or shift).
model EscalaHorario {
  /// Primary key of the schedule slot.
  id       Int    @id @default(autoincrement())
  /// Foreign key referencing the parent scale template.
  escalaId Int
  escala   Escala @relation(fields: [escalaId], references: [id], onDelete: Cascade)

  /// Index of the day inside the cycle (starts at zero).
  indiceCiclo             Int
  /// Optional ISO day of week (0 = Sunday, 6 = Saturday) to help building reports.
  diaSemana               Int?
  /// HH:mm string representing when the shift is expected to start.
  horaInicio              String? @db.VarChar(5)
  /// HH:mm string representing when the shift is expected to finish.
  horaFim                 String? @db.VarChar(5)
  /// Number of electricians that must be allocated to this slot.
  eletricistasNecessarios Int
  /// When true, the slot represents a rest day within the cycle.
  folga                   Boolean @default(false)
  /// Optional label (morning, night, reserva técnica...).
  etiqueta                String? @db.VarChar(64)
  /// Offset applied when calculating rotating assignments.
  rotacaoOffset           Int     @default(0)

  /// Audit metadata for lifecycle.
  createdAt DateTime  @default(now())
  createdBy String    @db.VarChar(255)
  updatedAt DateTime? @updatedAt
  updatedBy String?   @db.VarChar(255)
  deletedAt DateTime?
  deletedBy String?   @db.VarChar(255)

  /// Collaborator assignments that belong to this slot definition.
  alocacoes EscalaAlocacao[]

  @@index([escalaId, indiceCiclo])
}

/// Links electricians to schedule slots enabling automated rotations.
model EscalaAlocacao {
  /// Identifier of the allocation entry.
  id              Int           @id @default(autoincrement())
  /// Parent schedule slot reference.
  escalaHorarioId Int
  horario         EscalaHorario @relation(fields: [escalaHorarioId], references: [id], onDelete: Cascade)
  /// Electrician attached to the rotation.
  eletricistaId   Int
  eletricista     Eletricista   @relation(fields: [eletricistaId], references: [id], onDelete: Restrict)
  /// Order used to calculate who should work in each day.
  ordemRotacao    Int           @default(0)
  /// Enables temporary allocations valid only during a specific period.
  vigenciaInicio  DateTime?
  vigenciaFim     DateTime?
  /// Whether this allocation is active.
  ativo           Boolean       @default(true)

  /// Audit data for traceability.
  createdAt DateTime  @default(now())
  createdBy String    @db.VarChar(255)
  updatedAt DateTime? @updatedAt
  updatedBy String?   @db.VarChar(255)
  deletedAt DateTime?
  deletedBy String?   @db.VarChar(255)

  @@index([escalaHorarioId])
  @@index([eletricistaId])
}

// From models/supervisor.prisma
model Supervisor {
  id   Int    @id @default(autoincrement())
  nome String @db.VarChar(255)

  contratoId Int
  contrato   Contrato @relation(fields: [contratoId], references: [id])

  createdAt DateTime  @default(now())
  createdBy String    @db.VarChar(255)
  updatedAt DateTime? @updatedAt
  updatedBy String?   @db.VarChar(255)
  deletedAt DateTime?
  deletedBy String?   @db.VarChar(255)

  EquipeSupervisor EquipeSupervisor[]
}

// From models/teste.prisma
model Test {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(255)
}

// From models/turno.prisma
model Turno {
  id Int @id @default(autoincrement())

  dataSolicitacao DateTime
  dataInicio      DateTime
  dataFim         DateTime?

  veiculoId Int
  veiculo   Veiculo @relation(fields: [veiculoId], references: [id])

  equipeId Int
  equipe   Equipe @relation(fields: [equipeId], references: [id])

  dispositivo String @db.VarChar(255)

  kmInicio Int
  KmFim    Int?

  createdAt DateTime  @default(now())
  createdBy String    @db.VarChar(255)
  updatedAt DateTime? @updatedAt
  updatedBy String?   @db.VarChar(255)
  deletedAt DateTime?
  deletedBy String?   @db.VarChar(255)

  TurnoEletricistas TurnoEletricista[]
}

model TurnoEletricista {
  id Int @id @default(autoincrement())

  turnoId Int
  turno   Turno @relation(fields: [turnoId], references: [id])

  eletricistaId Int
  eletricista   Eletricista @relation(fields: [eletricistaId], references: [id])

  createdAt DateTime  @default(now())
  createdBy String    @db.VarChar(255)
  updatedAt DateTime? @updatedAt
  updatedBy String?   @db.VarChar(255)
  deletedAt DateTime?
  deletedBy String?   @db.VarChar(255)

  @@map("TurnoEletricistas")
}

// From models/veiculo-base-historico.prisma
/**
 * Modelo para Histórico de Bases de Veículos
 * Este modelo rastreia todas as transferências de veículos entre bases,
 * mantendo um histórico completo de onde cada veículo esteve e quando.
 * CASOS DE USO:
 * - Rastrear transferências de veículos entre bases
 * - Auditoria de movimentações
 * - Relatórios de histórico de bases
 * - Controle de localização atual e passada
 */

model VeiculoBaseHistorico {
  id Int @id @default(autoincrement())

  // Relacionamentos principais
  veiculoId Int
  veiculo   Veiculo @relation(fields: [veiculoId], references: [id])

  baseId Int
  base   Base @relation(fields: [baseId], references: [id])

  // Controle de período
  dataInicio DateTime // Quando o veículo chegou nesta base
  dataFim    DateTime? // Quando o veículo saiu desta base (null = ainda está na base)

  // Motivo da transferência
  motivo String? @db.VarChar(500) // Motivo da transferência (opcional)

  // Auditoria
  createdAt DateTime  @default(now())
  createdBy String    @db.VarChar(255)
  updatedAt DateTime? @updatedAt
  updatedBy String?   @db.VarChar(255)
  deletedAt DateTime?
  deletedBy String?   @db.VarChar(255)

  // Índices para performance
  @@index([veiculoId])
  @@index([baseId])
  @@index([dataInicio])
  @@index([dataFim])
  @@index([veiculoId, dataInicio])
}

// From models/veiculo.prisma
model TipoVeiculo {
  id   Int    @id @default(autoincrement())
  nome String @db.VarChar(255)

  createdAt DateTime  @default(now())
  createdBy String    @db.VarChar(255)
  updatedAt DateTime? @updatedAt
  updatedBy String?   @db.VarChar(255)
  deletedAt DateTime?
  deletedBy String?   @db.VarChar(255)

  Veiculo                     Veiculo[]
  ChecklistTipoVeiculoRelacao ChecklistTipoVeiculoRelacao[]
}

model Veiculo {
  id     Int    @id @default(autoincrement())
  placa  String @db.VarChar(8)
  modelo String @db.VarChar(255)
  ano    Int

  tipoVeiculoId Int
  tipoVeiculo   TipoVeiculo @relation(fields: [tipoVeiculoId], references: [id])

  contratoId Int
  contrato   Contrato @relation(fields: [contratoId], references: [id])

  createdAt DateTime  @default(now())
  createdBy String    @db.VarChar(255)
  updatedAt DateTime? @updatedAt
  updatedBy String?   @db.VarChar(255)
  deletedAt DateTime?
  deletedBy String?   @db.VarChar(255)

  VeiculoOdometro      VeiculoOdometro[]
  VeiculoBaseHistorico VeiculoBaseHistorico[]

  Turno Turno[]
}

model VeiculoOdometro {
  id    Int      @id @default(autoincrement())
  valor Int
  data  DateTime

  veiculoId Int
  veiculo   Veiculo @relation(fields: [veiculoId], references: [id])

  createdAt DateTime  @default(now())
  createdBy String    @db.VarChar(255)
  updatedAt DateTime? @updatedAt
  updatedBy String?   @db.VarChar(255)
  deletedAt DateTime?
  deletedBy String?   @db.VarChar(255)
}
