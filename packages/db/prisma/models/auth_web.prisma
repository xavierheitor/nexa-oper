model User {
  id       Int    @id @default(autoincrement())
  nome     String @db.VarChar(255)
  email    String @db.VarChar(255) @unique
  username String @db.VarChar(255) @unique
  password String @db.VarChar(255)

  createdAt DateTime  @default(now())
  createdBy String    @db.VarChar(255)
  updatedAt DateTime? @updatedAt
  updatedBy String?   @db.VarChar(255)
  deletedAt DateTime?
  deletedBy String?   @db.VarChar(255)

  Session Session[]
  Account Account[]

  @@index([username])
  @@index([email])
  RoleUser RoleUser[]
}

model Account {
  id                String  @id @default(uuid())
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  userId Int
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("contas")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  expires      DateTime

  userId Int
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessoes")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("tokens_verificacao")
}


model Role {
  id Int @id @default(autoincrement())
  nome String @db.VarChar(255)

  createdAt DateTime @default(now())
  createdBy String @db.VarChar(255)
  updatedAt DateTime? @updatedAt
  updatedBy String? @db.VarChar(255)

  RoleUser RoleUser[]
}

model RoleUser {
  id Int @id @default(autoincrement())

  userId Int
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  roleId Int
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)
}