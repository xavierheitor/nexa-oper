model Apr {
  id   Int    @id @default(autoincrement())
  nome String @db.VarChar(255)

  createdAt DateTime  @default(now())
  createdBy String    @db.VarChar(255)
  updatedAt DateTime? @updatedAt
  updatedBy String?   @db.VarChar(255)
  deletedAt DateTime?
  deletedBy String?   @db.VarChar(255)

  AprPerguntaRelacao      AprPerguntaRelacao[]
  AprOpcaoRespostaRelacao AprOpcaoRespostaRelacao[]
  AprTipoAtividadeRelacao AprTipoAtividadeRelacao[]
}

model AprPergunta {
  id   Int    @id @default(autoincrement())
  nome String @db.VarChar(255)

  createdAt DateTime  @default(now())
  createdBy String    @db.VarChar(255)
  updatedAt DateTime? @updatedAt
  updatedBy String?   @db.VarChar(255)
  deletedAt DateTime?
  deletedBy String?   @db.VarChar(255)

  AprPerguntaRelacao AprPerguntaRelacao[]
}

model AprPerguntaRelacao {
  id Int @id @default(autoincrement())

  aprPerguntaId Int
  aprPergunta   AprPergunta @relation(fields: [aprPerguntaId], references: [id])

  ordem Int @default(0)

  aprId Int
  apr   Apr @relation(fields: [aprId], references: [id])

  createdAt DateTime  @default(now())
  createdBy String    @db.VarChar(255)
  updatedAt DateTime? @updatedAt
  updatedBy String?   @db.VarChar(255)
  deletedAt DateTime?
  deletedBy String?   @db.VarChar(255)
}

model AprOpcaoResposta {
  id   Int    @id @default(autoincrement())
  nome String @db.VarChar(255)

  createdAt DateTime  @default(now())
  createdBy String    @db.VarChar(255)
  updatedAt DateTime? @updatedAt
  updatedBy String?   @db.VarChar(255)
  deletedAt DateTime?
  deletedBy String?   @db.VarChar(255)

  AprOpcaoRespostaRelacao AprOpcaoRespostaRelacao[]
}

model AprOpcaoRespostaRelacao {
  id Int @id @default(autoincrement())

  aprOpcaoRespostaId Int
  aprOpcaoResposta   AprOpcaoResposta @relation(fields: [aprOpcaoRespostaId], references: [id])

  aprId Int
  apr   Apr @relation(fields: [aprId], references: [id])

  createdAt DateTime  @default(now())
  createdBy String    @db.VarChar(255)
  updatedAt DateTime? @updatedAt
  updatedBy String?   @db.VarChar(255)
  deletedAt DateTime?
  deletedBy String?   @db.VarChar(255)
}

model AprTipoAtividadeRelacao {
  id Int @id @default(autoincrement())

  aprId Int
  apr   Apr @relation(fields: [aprId], references: [id])

  tipoAtividadeId Int
  tipoAtividade   TipoAtividade @relation(fields: [tipoAtividadeId], references: [id])

  createdAt DateTime  @default(now())
  createdBy String    @db.VarChar(255)
  updatedAt DateTime? @updatedAt
  updatedBy String?   @db.VarChar(255)
  deletedAt DateTime?
  deletedBy String?   @db.VarChar(255)

  // Índice único condicional: apenas um apr ativo por tipo de atividade
  @@unique([tipoAtividadeId, deletedAt], map: "unique_active_apr_tipo_atividade")
}

model TipoAtividade {
  id   Int    @id @default(autoincrement())
  nome String @db.VarChar(255)

  AprTipoAtividadeRelacao AprTipoAtividadeRelacao[]

  createdAt DateTime  @default(now())
  createdBy String    @db.VarChar(255)
  updatedAt DateTime? @updatedAt
  updatedBy String?   @db.VarChar(255)
  deletedAt DateTime?
  deletedBy String?   @db.VarChar(255)
}

model MobileUser {
  id       Int    @id @default(autoincrement())
  username String @unique @db.VarChar(255)
  password String @db.VarChar(255)

  createdAt DateTime  @default(now())
  createdBy String    @db.VarChar(255)
  updatedAt DateTime? @updatedAt
  updatedBy String?   @db.VarChar(255)
  deletedAt DateTime?
  deletedBy String?   @db.VarChar(255)

  mobileSession MobileSession[]

  MobileToken MobileToken[]

  MobileContratoPermissao MobileContratoPermissao[]
}

model MobileSession {
  id         String   @id @default(uuid())
  deviceInfo String?  @db.Text
  lastActive DateTime @default(now())
  createdAt  DateTime @default(now())
  expiresAt  DateTime
  ativa      Boolean  @default(true)

  mobileUserId Int
  mobileUser   MobileUser @relation(fields: [mobileUserId], references: [id])

  @@index([mobileUserId])
  @@map("sessoes_mobile")
}

model MobileToken {
  id                    Int       @id @default(autoincrement())
  token                 String    @unique @db.VarChar(255)
  refreshToken          String?   @unique @db.VarChar(255)
  refreshTokenExpiresAt DateTime?
  usuarioMobileId       String
  expiresAt             DateTime
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  revoked               Boolean   @default(false)

  mobileUserId Int
  mobileUser   MobileUser @relation(fields: [mobileUserId], references: [id])

  @@index([mobileUserId])
  @@map("tokens_mobile")
}

model User {
  id       Int    @id @default(autoincrement())
  nome     String @db.VarChar(255)
  email    String @unique @db.VarChar(255)
  username String @unique @db.VarChar(255)
  password String @db.VarChar(255)

  createdAt DateTime  @default(now())
  createdBy String    @db.VarChar(255)
  updatedAt DateTime? @updatedAt
  updatedBy String?   @db.VarChar(255)
  deletedAt DateTime?
  deletedBy String?   @db.VarChar(255)

  Session  Session[]
  Account  Account[]
  RoleUser RoleUser[]

  @@index([username])
  @@index([email])
}

model Account {
  id                String  @id @default(uuid())
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("contas")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  expires      DateTime

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessoes")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("tokens_verificacao")
}

model Role {
  id   Int    @id @default(autoincrement())
  nome String @db.VarChar(255)

  createdAt DateTime  @default(now())
  createdBy String    @db.VarChar(255)
  updatedAt DateTime? @updatedAt
  updatedBy String?   @db.VarChar(255)

  RoleUser RoleUser[]
}

model RoleUser {
  id Int @id @default(autoincrement())

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  roleId Int
  role   Role @relation(fields: [roleId], references: [id], onDelete: Cascade)
}

model Base {
  id   Int    @id @default(autoincrement())
  nome String @db.VarChar(255)

  contratoId Int
  contrato   Contrato @relation(fields: [contratoId], references: [id])

  createdAt DateTime  @default(now())
  createdBy String    @db.VarChar(255)
  updatedAt DateTime? @updatedAt
  updatedBy String?   @db.VarChar(255)
  deletedAt DateTime?
  deletedBy String?   @db.VarChar(255)

  // Relacionamentos com históricos
  EletricistaBaseHistorico EletricistaBaseHistorico[]
  VeiculoBaseHistorico     VeiculoBaseHistorico[]
  EquipeBaseHistorico      EquipeBaseHistorico[]
}

/**
 * Modelos para checklists preenchidos e sistema de pendências
 * Este arquivo define os modelos para armazenar checklists preenchidos
 * pelos eletricistas durante a abertura de turnos, incluindo respostas,
 * pendências automáticas e sincronização de fotos.
 */

/**
 * Checklist preenchido por um eletricista durante um turno
 */
model ChecklistPreenchido {
  id Int @id @default(autoincrement())

  // Relacionamentos principais
  turnoId Int
  turno   Turno @relation(fields: [turnoId], references: [id], onDelete: Cascade)

  checklistId Int
  checklist   Checklist @relation(fields: [checklistId], references: [id])

  eletricistaId Int
  eletricista   Eletricista @relation(fields: [eletricistaId], references: [id])

  // Dados do preenchimento
  dataPreenchimento DateTime
  latitude          Float?
  longitude         Float?

  // Campos de auditoria
  createdAt DateTime  @default(now())
  createdBy String    @db.VarChar(255)
  updatedAt DateTime? @updatedAt
  updatedBy String?   @db.VarChar(255)
  deletedAt DateTime?
  deletedBy String?   @db.VarChar(255)

  // Relacionamentos
  ChecklistResposta  ChecklistResposta[]
  ChecklistPendencia ChecklistPendencia[]

  @@map("ChecklistPreenchidos")
}

/**
 * Resposta individual de uma pergunta do checklist
 */
model ChecklistResposta {
  id Int @id @default(autoincrement())

  // Relacionamentos
  checklistPreenchidoId Int
  checklistPreenchido   ChecklistPreenchido @relation(fields: [checklistPreenchidoId], references: [id], onDelete: Cascade)

  perguntaId Int
  pergunta   ChecklistPergunta @relation(fields: [perguntaId], references: [id])

  opcaoRespostaId Int
  opcaoResposta   ChecklistOpcaoResposta @relation(fields: [opcaoRespostaId], references: [id])

  // Dados da resposta
  dataResposta DateTime

  // Controle de fotos
  aguardandoFoto     Boolean @default(false)
  fotosSincronizadas Int     @default(0)

  // Campos de auditoria
  createdAt DateTime  @default(now())
  createdBy String    @db.VarChar(255)
  updatedAt DateTime? @updatedAt
  updatedBy String?   @db.VarChar(255)
  deletedAt DateTime?
  deletedBy String?   @db.VarChar(255)

  // Relacionamentos
  ChecklistPendencia    ChecklistPendencia?
  ChecklistRespostaFoto ChecklistRespostaFoto[]

  @@map("ChecklistRespostas")
}

/**
 * Pendência gerada automaticamente quando uma resposta tem geraPendencia=true
 */
model ChecklistPendencia {
  id Int @id @default(autoincrement())

  // Relacionamentos
  checklistRespostaId Int               @unique
  checklistResposta   ChecklistResposta @relation(fields: [checklistRespostaId], references: [id], onDelete: Cascade)

  checklistPreenchidoId Int
  checklistPreenchido   ChecklistPreenchido @relation(fields: [checklistPreenchidoId], references: [id], onDelete: Cascade)

  turnoId Int
  turno   Turno @relation(fields: [turnoId], references: [id], onDelete: Cascade)

  // Status da pendência
  status StatusPendencia @default(AGUARDANDO_TRATAMENTO)

  // Observações
  observacaoProblema   String?
  observacaoTratamento String?

  // Tratamento
  tratadoPor String?   @db.VarChar(255)
  tratadoEm  DateTime?

  // Campos de auditoria
  createdAt DateTime  @default(now())
  createdBy String    @db.VarChar(255)
  updatedAt DateTime? @updatedAt
  updatedBy String?   @db.VarChar(255)
  deletedAt DateTime?
  deletedBy String?   @db.VarChar(255)

  // Relacionamentos
  ChecklistRespostaFoto ChecklistRespostaFoto[]

  @@map("ChecklistPendencias")
}

/**
 * Fotos sincronizadas de forma assíncrona para respostas com pendências
 */
model ChecklistRespostaFoto {
  id Int @id @default(autoincrement())

  // Relacionamentos
  checklistRespostaId Int
  checklistResposta   ChecklistResposta @relation(fields: [checklistRespostaId], references: [id], onDelete: Cascade)

  checklistPendenciaId Int?
  checklistPendencia   ChecklistPendencia? @relation(fields: [checklistPendenciaId], references: [id], onDelete: SetNull)

  // Dados do arquivo
  caminhoArquivo String  @db.VarChar(500)
  urlPublica     String? @db.VarChar(500)
  tamanhoBytes   BigInt
  mimeType       String  @db.VarChar(100)

  // Sincronização
  sincronizadoEm DateTime

  // Metadados (EXIF, geolocalização, etc)
  metadados Json?

  // Campos de auditoria
  createdAt DateTime  @default(now())
  createdBy String    @db.VarChar(255)
  updatedAt DateTime? @updatedAt
  updatedBy String?   @db.VarChar(255)
  deletedAt DateTime?
  deletedBy String?   @db.VarChar(255)

  @@map("ChecklistRespostaFotos")
}

/**
 * Enum para status das pendências
 */
enum StatusPendencia {
  AGUARDANDO_TRATAMENTO
  EM_TRATAMENTO
  TRATADA
  REGISTRO_INCORRETO
}

model TipoChecklist {
  id   Int    @id @default(autoincrement())
  nome String @db.VarChar(255)

  createdAt DateTime  @default(now())
  createdBy String    @db.VarChar(255)
  updatedAt DateTime? @updatedAt
  updatedBy String?   @db.VarChar(255)
  deletedAt DateTime?
  deletedBy String?   @db.VarChar(255)

  Checklist Checklist[]

  ChecklistTipoEquipeRelacao ChecklistTipoEquipeRelacao[]
}

model Checklist {
  id   Int    @id @default(autoincrement())
  nome String @db.VarChar(255)

  tipoChecklistId Int
  tipoChecklist   TipoChecklist @relation(fields: [tipoChecklistId], references: [id])

  createdAt DateTime  @default(now())
  createdBy String    @db.VarChar(255)
  updatedAt DateTime? @updatedAt
  updatedBy String?   @db.VarChar(255)
  deletedAt DateTime?
  deletedBy String?   @db.VarChar(255)

  ChecklistPerguntaRelacao      ChecklistPerguntaRelacao[]
  ChecklistOpcaoRespostaRelacao ChecklistOpcaoRespostaRelacao[]
  ChecklistTipoVeiculoRelacao   ChecklistTipoVeiculoRelacao[]
  ChecklistTipoEquipeRelacao    ChecklistTipoEquipeRelacao[]
  ChecklistPreenchidos          ChecklistPreenchido[]
}

model ChecklistPergunta {
  id   Int    @id @default(autoincrement())
  nome String @db.VarChar(255)

  createdAt DateTime  @default(now())
  createdBy String    @db.VarChar(255)
  updatedAt DateTime? @updatedAt
  updatedBy String?   @db.VarChar(255)
  deletedAt DateTime?
  deletedBy String?   @db.VarChar(255)

  ChecklistPerguntaRelacao ChecklistPerguntaRelacao[]
  ChecklistRespostas       ChecklistResposta[]
}

model ChecklistPerguntaRelacao {
  id Int @id @default(autoincrement())

  checklistPerguntaId Int
  checklistPergunta   ChecklistPergunta @relation(fields: [checklistPerguntaId], references: [id])

  checklistId Int
  checklist   Checklist @relation(fields: [checklistId], references: [id])

  createdAt DateTime  @default(now())
  createdBy String    @db.VarChar(255)
  updatedAt DateTime? @updatedAt
  updatedBy String?   @db.VarChar(255)
  deletedAt DateTime?
  deletedBy String?   @db.VarChar(255)
}

model ChecklistOpcaoResposta {
  id   Int    @id @default(autoincrement())
  nome String @db.VarChar(255)

  geraPendencia Boolean @default(false)

  checklistOpcaoRespostaRelacao ChecklistOpcaoRespostaRelacao[]
  ChecklistRespostas            ChecklistResposta[]

  createdAt DateTime  @default(now())
  createdBy String    @db.VarChar(255)
  updatedAt DateTime? @updatedAt
  updatedBy String?   @db.VarChar(255)
  deletedAt DateTime?
  deletedBy String?   @db.VarChar(255)
}

model ChecklistOpcaoRespostaRelacao {
  id Int @id @default(autoincrement())

  checklistOpcaoRespostaId Int
  checklistOpcaoResposta   ChecklistOpcaoResposta @relation(fields: [checklistOpcaoRespostaId], references: [id])

  checklistId Int
  checklist   Checklist @relation(fields: [checklistId], references: [id])

  createdAt DateTime  @default(now())
  createdBy String    @db.VarChar(255)
  updatedAt DateTime? @updatedAt
  updatedBy String?   @db.VarChar(255)
  deletedAt DateTime?
  deletedBy String?   @db.VarChar(255)
}

model ChecklistTipoVeiculoRelacao {
  id Int @id @default(autoincrement())

  checklistId Int
  checklist   Checklist @relation(fields: [checklistId], references: [id])

  tipoVeiculoId Int
  tipoVeiculo   TipoVeiculo @relation(fields: [tipoVeiculoId], references: [id])

  createdAt DateTime  @default(now())
  createdBy String    @db.VarChar(255)
  updatedAt DateTime? @updatedAt
  updatedBy String?   @db.VarChar(255)
  deletedAt DateTime?
  deletedBy String?   @db.VarChar(255)

  // Índice único condicional: apenas um checklist ativo por tipo de veículo
  @@unique([tipoVeiculoId, deletedAt], map: "unique_active_checklist_tipo_veiculo")
}

model ChecklistTipoEquipeRelacao {
  id Int @id @default(autoincrement())

  checklistId Int
  checklist   Checklist @relation(fields: [checklistId], references: [id])

  tipoEquipeId Int
  tipoEquipe   TipoEquipe @relation(fields: [tipoEquipeId], references: [id])

  // NOVO CAMPO: referência direta ao tipo de checklist
  tipoChecklistId Int
  tipoChecklist   TipoChecklist @relation(fields: [tipoChecklistId], references: [id])

  createdAt DateTime  @default(now())
  createdBy String    @db.VarChar(255)
  updatedAt DateTime? @updatedAt
  updatedBy String?   @db.VarChar(255)
  deletedAt DateTime?
  deletedBy String?   @db.VarChar(255)

  // UNIQUE KEY: permite múltiplos checklists por tipo de equipe,
  // mas não permite checklists do mesmo tipo ativos simultaneamente
  @@unique([tipoEquipeId, tipoChecklistId, deletedAt], map: "unique_active_checklist_tipo_por_equipe")
}

model Contrato {
  id     Int    @id @default(autoincrement())
  nome   String @db.VarChar(255)
  numero String @db.VarChar(255)

  dataInicio DateTime?
  dataFim    DateTime?

  createdAt DateTime  @default(now())
  createdBy String    @db.VarChar(255)
  updatedAt DateTime? @updatedAt
  updatedBy String?   @db.VarChar(255)
  deletedAt DateTime?
  deletedBy String?   @db.VarChar(255)

  Veiculo Veiculo[]

  Eletricista Eletricista[]

  Equipe Equipe[]

  Supervisor Supervisor[]

  MobileContratoPermissao MobileContratoPermissao[]

  Base Base[]
}

model MobileContratoPermissao {
  id Int @id @default(autoincrement())

  contratoId Int
  contrato   Contrato @relation(fields: [contratoId], references: [id])

  mobileUserId Int
  mobileUser   MobileUser @relation(fields: [mobileUserId], references: [id])

  createdAt DateTime  @default(now())
  createdBy String    @db.VarChar(255)
  updatedAt DateTime? @updatedAt
  updatedBy String?   @db.VarChar(255)
  deletedAt DateTime?
  deletedBy String?   @db.VarChar(255)
}

/**
 * Modelo para Histórico de Bases de Eletricistas
 * Este modelo rastreia todas as transferências de eletricistas entre bases,
 * mantendo um histórico completo de onde cada eletricista esteve e quando.
 * CASOS DE USO:
 * - Rastrear transferências de eletricistas entre bases
 * - Auditoria de movimentações
 * - Relatórios de histórico de bases
 * - Controle de localização atual e passada
 */

model EletricistaBaseHistorico {
  id Int @id @default(autoincrement())

  // Relacionamentos principais
  eletricistaId Int
  eletricista   Eletricista @relation(fields: [eletricistaId], references: [id])

  baseId Int
  base   Base @relation(fields: [baseId], references: [id])

  // Controle de período
  dataInicio DateTime // Quando o eletricista chegou nesta base
  dataFim    DateTime? // Quando o eletricista saiu desta base (null = ainda está na base)

  // Motivo da transferência
  motivo String? @db.VarChar(500) // Motivo da transferência (opcional)

  // Auditoria
  createdAt DateTime  @default(now())
  createdBy String    @db.VarChar(255)
  updatedAt DateTime? @updatedAt
  updatedBy String?   @db.VarChar(255)
  deletedAt DateTime?
  deletedBy String?   @db.VarChar(255)

  // Índices para performance
  @@index([eletricistaId])
  @@index([baseId])
  @@index([dataInicio])
  @@index([dataFim])
  @@index([eletricistaId, dataInicio])
}

model Eletricista {
  id        Int      @id @default(autoincrement())
  nome      String   @db.VarChar(255)
  matricula String   @db.VarChar(255)
  telefone  String   @db.VarChar(255)
  estado    String   @db.VarChar(2)
  admissao  DateTime @default(now())

  cargoId Int
  cargo   Cargo @relation(fields: [cargoId], references: [id])

  createdAt DateTime  @default(now())
  createdBy String    @db.VarChar(255)
  updatedAt DateTime? @updatedAt
  updatedBy String?   @db.VarChar(255)
  deletedAt DateTime?
  deletedBy String?   @db.VarChar(255)

  contratoId Int
  contrato   Contrato @relation(fields: [contratoId], references: [id])

  TurnoEletricistas        TurnoEletricista[]
  EletricistaBaseHistorico EletricistaBaseHistorico[]
  ChecklistPreenchidos     ChecklistPreenchido[]

  EventoCobertura EventoCobertura[]

  SlotEscala SlotEscala[]
}

model Cargo {
  id   Int    @id @default(autoincrement())
  nome String @db.VarChar(255)

  salarioBase Float @default(0)

  createdAt DateTime  @default(now())
  createdBy String    @db.VarChar(255)
  updatedAt DateTime? @updatedAt
  updatedBy String?   @db.VarChar(255)
  deletedAt DateTime?
  deletedBy String?   @db.VarChar(255)

  Eletricista Eletricista[]
}

/**
 * Modelo para Histórico de Bases de Equipes
 * Este modelo rastreia todas as transferências de equipes entre bases,
 * mantendo um histórico completo de onde cada equipe esteve e quando.
 * CASOS DE USO:
 * - Rastrear transferências de equipes entre bases
 * - Auditoria de movimentações
 * - Relatórios de histórico de bases
 * - Controle de localização atual e passada
 */

model EquipeBaseHistorico {
  id Int @id @default(autoincrement())

  // Relacionamentos principais
  equipeId Int
  equipe   Equipe @relation(fields: [equipeId], references: [id])

  baseId Int
  base   Base @relation(fields: [baseId], references: [id])

  // Controle de período
  dataInicio DateTime // Quando a equipe chegou nesta base
  dataFim    DateTime? // Quando a equipe saiu desta base (null = ainda está na base)

  // Motivo da transferência
  motivo String? @db.VarChar(500) // Motivo da transferência (opcional)

  // Auditoria
  createdAt DateTime  @default(now())
  createdBy String    @db.VarChar(255)
  updatedAt DateTime? @updatedAt
  updatedBy String?   @db.VarChar(255)
  deletedAt DateTime?
  deletedBy String?   @db.VarChar(255)

  // Índices para performance
  @@index([equipeId])
  @@index([baseId])
  @@index([dataInicio])
  @@index([dataFim])
  @@index([equipeId, dataInicio])
}

model TipoEquipe {
  id   Int    @id @default(autoincrement())
  nome String @db.VarChar(255)

  createdAt DateTime  @default(now())
  createdBy String    @db.VarChar(255)
  updatedAt DateTime? @updatedAt
  updatedBy String?   @db.VarChar(255)
  deletedAt DateTime?
  deletedBy String?   @db.VarChar(255)

  Equipe                     Equipe[]
  ChecklistTipoEquipeRelacao ChecklistTipoEquipeRelacao[]
}

model Equipe {
  id   Int    @id @default(autoincrement())
  nome String @db.VarChar(255)

  tipoEquipeId Int
  tipoEquipe   TipoEquipe @relation(fields: [tipoEquipeId], references: [id])

  contratoId Int
  contrato   Contrato @relation(fields: [contratoId], references: [id])

  createdAt DateTime  @default(now())
  createdBy String    @db.VarChar(255)
  updatedAt DateTime? @updatedAt
  updatedBy String?   @db.VarChar(255)
  deletedAt DateTime?
  deletedBy String?   @db.VarChar(255)

  EquipeSupervisor EquipeSupervisor[]

  Turno Turno[]

  EscalaEquipePeriodo EscalaEquipePeriodo[]

  EquipeHorarioVigencia EquipeHorarioVigencia[]

  EquipeTurnoHistorico EquipeTurnoHistorico[]

  EquipeBaseHistorico EquipeBaseHistorico[]
}

model EquipeSupervisor {
  id Int @id @default(autoincrement())

  equipeId Int
  equipe   Equipe @relation(fields: [equipeId], references: [id])

  supervisorId Int
  supervisor   Supervisor @relation(fields: [supervisorId], references: [id])

  inicio DateTime
  fim    DateTime?

  createdAt DateTime  @default(now())
  createdBy String    @db.VarChar(255)
  updatedAt DateTime? @updatedAt
  updatedBy String?   @db.VarChar(255)
  deletedAt DateTime?
  deletedBy String?   @db.VarChar(255)
}

/// =========================
/// Enums
/// =========================
enum ModoRepeticao {
  CICLO_DIAS
  SEMANA_DEPENDENTE
}

enum DiaSemana {
  SEGUNDA
  TERCA
  QUARTA
  QUINTA
  SEXTA
  SABADO
  DOMINGO
}

// Mantém TRABALHO/FOLGA/FALTA para uso em máscaras/padrões se quiser
enum StatusTrabalho {
  TRABALHO
  FOLGA
  FALTA
}

enum StatusEscalaEquipePeriodo {
  RASCUNHO
  EM_APROVACAO
  PUBLICADA
  ARQUIVADA
}

// Estado efetivo do slot (histórico do eletricista)
enum EstadoSlot {
  TRABALHO
  FOLGA
  FALTA
  EXCECAO
}

enum OrigemAtribuicao {
  GERACAO
  MANUAL
  REMANEJAMENTO
}

// Pode permanecer mesmo não sendo usado diretamente agora
enum StatusAtribuicaoPlanejada {
  ATIVO
  REMOVIDO
}

enum TipoIndisponibilidade {
  FERIAS
  LICENCA
  SUSPENSAO
  MEDICO
  TREINAMENTO
  OUTRO
}

enum EventoCoberturaTipo {
  FALTA
  SUPRIMENTO
  TROCA
}

enum EventoCoberturaResultado {
  COBERTO
  VAGA_DESCOBERTA
}

/// =========================
/// Catálogos / Regras
/// =========================

/// =========================
/// Catálogo de Tipos de Escala (sem "papel")
/// =========================
model TipoEscala {
  id   Int    @id @default(autoincrement())
  nome String @db.VarChar(255)

  // Define padrão (sem horário)
  modoRepeticao        ModoRepeticao
  cicloDias            Int? // se CICLO_DIAS
  periodicidadeSemanas Int? // se SEMANA_DEPENDENTE

  // Regra simples de composição diária (ex.: 4x2 → 3; Espanhola → 2)
  eletricistasPorTurma Int?

  ativo       Boolean @default(true)
  observacoes String? @db.VarChar(1000)

  createdAt DateTime  @default(now())
  createdBy String    @db.VarChar(255)
  updatedAt DateTime? @updatedAt
  updatedBy String?   @db.VarChar(255)
  deletedAt DateTime?
  deletedBy String?   @db.VarChar(255)

  // Padrões de T/F
  CicloPosicoes  TipoEscalaCicloPosicao[]
  SemanaMascaras TipoEscalaSemanaMascara[]

  // Uso
  EscalasEquipePeriodo EscalaEquipePeriodo[]
}

model TipoEscalaCicloPosicao {
  id           Int        @id @default(autoincrement())
  tipoEscalaId Int
  tipoEscala   TipoEscala @relation(fields: [tipoEscalaId], references: [id])

  posicao Int
  status  StatusTrabalho

  createdAt DateTime  @default(now())
  createdBy String    @db.VarChar(255)
  updatedAt DateTime? @updatedAt
  updatedBy String?   @db.VarChar(255)
  deletedAt DateTime?
  deletedBy String?   @db.VarChar(255)

  @@unique([tipoEscalaId, posicao])
}

model TipoEscalaSemanaMascara {
  id           Int        @id @default(autoincrement())
  tipoEscalaId Int
  tipoEscala   TipoEscala @relation(fields: [tipoEscalaId], references: [id])

  semanaIndex Int // 0..(periodicidadeSemanas-1)
  dia         DiaSemana
  status      StatusTrabalho

  createdAt DateTime  @default(now())
  createdBy String    @db.VarChar(255)
  updatedAt DateTime? @updatedAt
  updatedBy String?   @db.VarChar(255)
  deletedAt DateTime?
  deletedBy String?   @db.VarChar(255)

  @@unique([tipoEscalaId, semanaIndex, dia])
}

/// =========================
/// Configuração da Equipe por Período
/// =========================
model EscalaEquipePeriodo {
  id Int @id @default(autoincrement())

  equipeId Int
  equipe   Equipe @relation(fields: [equipeId], references: [id])

  periodoInicio DateTime
  periodoFim    DateTime

  tipoEscalaId Int
  tipoEscala   TipoEscala @relation(fields: [tipoEscalaId], references: [id])

  status StatusEscalaEquipePeriodo @default(RASCUNHO)
  versao Int                       @default(1)

  observacoes String? @db.VarChar(1000)

  createdAt DateTime  @default(now())
  createdBy String    @db.VarChar(255)
  updatedAt DateTime? @updatedAt
  updatedBy String?   @db.VarChar(255)
  deletedAt DateTime?
  deletedBy String?   @db.VarChar(255)

  Slots SlotEscala[]

  @@index([equipeId, periodoInicio])
  @@index([tipoEscalaId])
}

/// =========================
/// Slot = (dia + eletricista) com estado
/// =========================
model SlotEscala {
  id Int @id @default(autoincrement())

  escalaEquipePeriodoId Int
  escalaEquipePeriodo   EscalaEquipePeriodo @relation(fields: [escalaEquipePeriodoId], references: [id])

  eletricistaId Int
  eletricista   Eletricista @relation(fields: [eletricistaId], references: [id])

  data   DateTime
  estado EstadoSlot

  // Horários previstos herdados da vigência da equipe (se TRABALHO)
  inicioPrevisto String? @db.VarChar(8) // "HH:MM:SS"
  fimPrevisto    String? @db.VarChar(8) // "HH:MM:SS"

  anotacoesDia String? @db.VarChar(1000)

  origem      OrigemAtribuicao @default(GERACAO)
  observacoes String?          @db.VarChar(1000)

  createdAt DateTime  @default(now())
  createdBy String    @db.VarChar(255)
  updatedAt DateTime? @updatedAt
  updatedBy String?   @db.VarChar(255)
  deletedAt DateTime?
  deletedBy String?   @db.VarChar(255)

  Coberturas EventoCobertura[]

  // Um slot por (período, dia, eletricista)
  @@unique([escalaEquipePeriodoId, data, eletricistaId])
  @@index([data])
  @@index([eletricistaId, data])
}

/// =========================
/// Evento de cobertura (liga-se ao slot planejado)
/// =========================
model EventoCobertura {
  id Int @id @default(autoincrement())

  slotEscalaId Int
  slotEscala   SlotEscala @relation(fields: [slotEscalaId], references: [id])

  // Quem cobriu (pode ser alguém da mesma equipe ou outra)
  eletricistaCobrindoId Int?
  eletricistaCobrindo   Eletricista? @relation(fields: [eletricistaCobrindoId], references: [id])

  tipo          EventoCoberturaTipo
  resultado     EventoCoberturaResultado
  justificativa String?                  @db.VarChar(1000)

  registradoEm DateTime @default(now())

  createdAt DateTime  @default(now())
  createdBy String    @db.VarChar(255)
  updatedAt DateTime? @updatedAt
  updatedBy String?   @db.VarChar(255)
  deletedAt DateTime?
  deletedBy String?   @db.VarChar(255)

  @@index([slotEscalaId])
  @@index([eletricistaCobrindoId])
}

/// =========================
/// Horários por vigência da equipe
/// =========================
model EquipeHorarioVigencia {
  id Int @id @default(autoincrement())

  equipeId Int
  equipe   Equipe @relation(fields: [equipeId], references: [id])

  inicioTurnoHora String  @db.VarChar(8) // "HH:MM:SS"
  duracaoHoras    Decimal @db.Decimal(5, 2) // ex.: 8.00, 12.00

  vigenciaInicio DateTime
  vigenciaFim    DateTime?

  createdAt DateTime  @default(now())
  createdBy String    @db.VarChar(255)
  updatedAt DateTime? @updatedAt
  updatedBy String?   @db.VarChar(255)
  deletedAt DateTime?
  deletedBy String?   @db.VarChar(255)

  @@index([equipeId, vigenciaInicio])
}

/// ===============================================
/// Catálogo de Horários de Abertura (presets)
/// ===============================================
model HorarioAberturaCatalogo {
  id   Int    @id @default(autoincrement())
  nome String @db.VarChar(255) // Ex.: "06h • 8h + 1h int."

  // Preset base (usado como modelo)
  inicioTurnoHora       String  @db.VarChar(8) // "HH:MM:SS"
  duracaoHoras          Decimal @db.Decimal(5, 2) // ex.: 8.00
  duracaoIntervaloHoras Decimal @db.Decimal(5, 2) // ex.: 1.00

  ativo       Boolean @default(true)
  observacoes String? @db.VarChar(1000)

  // Auditoria
  createdAt DateTime  @default(now())
  createdBy String    @db.VarChar(255)
  updatedAt DateTime? @updatedAt
  updatedBy String?   @db.VarChar(255)
  deletedAt DateTime?
  deletedBy String?   @db.VarChar(255)

  // Histórico que usou este preset
  Historicos EquipeTurnoHistorico[]

  @@index([ativo])
  @@index([nome])
}

/// ===================================================
/// Histórico de Horário de Turno por Equipe (snapshot)
/// ===================================================
model EquipeTurnoHistorico {
  id Int @id @default(autoincrement())

  // Chave do histórico (qual equipe)
  equipeId Int
  equipe   Equipe @relation(fields: [equipeId], references: [id])

  // Referência opcional ao preset usado (só para rastreabilidade)
  horarioAberturaCatalogoId Int?
  horarioAberturaCatalogo   HorarioAberturaCatalogo? @relation(fields: [horarioAberturaCatalogoId], references: [id])

  // Vigência temporal (histórico do "a partir de")
  dataInicio DateTime // Quando esta configuração passa a valer
  dataFim    DateTime? // Quando deixa de valer (null = vigente)

  // SNAPSHOT dos valores (não dependem do catálogo depois de criado)
  inicioTurnoHora       String  @db.VarChar(8) // "HH:MM:SS"
  duracaoHoras          Decimal @db.Decimal(5, 2) // ex.: 8.00
  duracaoIntervaloHoras Decimal @db.Decimal(5, 2) // ex.: 1.00

  // Opcional: persistir fim previsto do turno (pode ser calculado na app)
  fimTurnoHora String? @db.VarChar(8) // "HH:MM:SS"

  // Observações / motivo da mudança (opcional)
  motivo      String? @db.VarChar(500)
  observacoes String? @db.VarChar(1000)

  // Auditoria
  createdAt DateTime  @default(now())
  createdBy String    @db.VarChar(255)
  updatedAt DateTime? @updatedAt
  updatedBy String?   @db.VarChar(255)
  deletedAt DateTime?
  deletedBy String?   @db.VarChar(255)

  // Índices úteis
  @@index([equipeId])
  @@index([horarioAberturaCatalogoId])
  @@index([dataInicio])
  @@index([dataFim])
  @@index([equipeId, dataInicio])
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Supervisor {
  id   Int    @id @default(autoincrement())
  nome String @db.VarChar(255)

  contratoId Int
  contrato   Contrato @relation(fields: [contratoId], references: [id])

  createdAt DateTime  @default(now())
  createdBy String    @db.VarChar(255)
  updatedAt DateTime? @updatedAt
  updatedBy String?   @db.VarChar(255)
  deletedAt DateTime?
  deletedBy String?   @db.VarChar(255)

  EquipeSupervisor EquipeSupervisor[]
}

model Test {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(255)
}

model Turno {
  id Int @id @default(autoincrement())

  dataSolicitacao DateTime
  dataInicio      DateTime
  dataFim         DateTime?

  veiculoId Int
  veiculo   Veiculo @relation(fields: [veiculoId], references: [id])

  equipeId Int
  equipe   Equipe @relation(fields: [equipeId], references: [id])

  dispositivo String @db.VarChar(255)

  kmInicio Int
  KmFim    Int?

  createdAt DateTime  @default(now())
  createdBy String    @db.VarChar(255)
  updatedAt DateTime? @updatedAt
  updatedBy String?   @db.VarChar(255)
  deletedAt DateTime?
  deletedBy String?   @db.VarChar(255)

  TurnoEletricistas    TurnoEletricista[]
  ChecklistPreenchidos ChecklistPreenchido[]
  ChecklistPendencias  ChecklistPendencia[]
}

model TurnoEletricista {
  id Int @id @default(autoincrement())

  turnoId Int
  turno   Turno @relation(fields: [turnoId], references: [id])

  eletricistaId Int
  eletricista   Eletricista @relation(fields: [eletricistaId], references: [id])

  createdAt DateTime  @default(now())
  createdBy String    @db.VarChar(255)
  updatedAt DateTime? @updatedAt
  updatedBy String?   @db.VarChar(255)
  deletedAt DateTime?
  deletedBy String?   @db.VarChar(255)

  @@map("TurnoEletricistas")
}

/**
 * Modelo para Histórico de Bases de Veículos
 * Este modelo rastreia todas as transferências de veículos entre bases,
 * mantendo um histórico completo de onde cada veículo esteve e quando.
 * CASOS DE USO:
 * - Rastrear transferências de veículos entre bases
 * - Auditoria de movimentações
 * - Relatórios de histórico de bases
 * - Controle de localização atual e passada
 */

model VeiculoBaseHistorico {
  id Int @id @default(autoincrement())

  // Relacionamentos principais
  veiculoId Int
  veiculo   Veiculo @relation(fields: [veiculoId], references: [id])

  baseId Int
  base   Base @relation(fields: [baseId], references: [id])

  // Controle de período
  dataInicio DateTime // Quando o veículo chegou nesta base
  dataFim    DateTime? // Quando o veículo saiu desta base (null = ainda está na base)

  // Motivo da transferência
  motivo String? @db.VarChar(500) // Motivo da transferência (opcional)

  // Auditoria
  createdAt DateTime  @default(now())
  createdBy String    @db.VarChar(255)
  updatedAt DateTime? @updatedAt
  updatedBy String?   @db.VarChar(255)
  deletedAt DateTime?
  deletedBy String?   @db.VarChar(255)

  // Índices para performance
  @@index([veiculoId])
  @@index([baseId])
  @@index([dataInicio])
  @@index([dataFim])
  @@index([veiculoId, dataInicio])
}

model TipoVeiculo {
  id   Int    @id @default(autoincrement())
  nome String @db.VarChar(255)

  createdAt DateTime  @default(now())
  createdBy String    @db.VarChar(255)
  updatedAt DateTime? @updatedAt
  updatedBy String?   @db.VarChar(255)
  deletedAt DateTime?
  deletedBy String?   @db.VarChar(255)

  Veiculo                     Veiculo[]
  ChecklistTipoVeiculoRelacao ChecklistTipoVeiculoRelacao[]
}

model Veiculo {
  id     Int    @id @default(autoincrement())
  placa  String @db.VarChar(8)
  modelo String @db.VarChar(255)
  ano    Int

  tipoVeiculoId Int
  tipoVeiculo   TipoVeiculo @relation(fields: [tipoVeiculoId], references: [id])

  contratoId Int
  contrato   Contrato @relation(fields: [contratoId], references: [id])

  createdAt DateTime  @default(now())
  createdBy String    @db.VarChar(255)
  updatedAt DateTime? @updatedAt
  updatedBy String?   @db.VarChar(255)
  deletedAt DateTime?
  deletedBy String?   @db.VarChar(255)

  VeiculoOdometro      VeiculoOdometro[]
  VeiculoBaseHistorico VeiculoBaseHistorico[]

  Turno Turno[]
}

model VeiculoOdometro {
  id    Int      @id @default(autoincrement())
  valor Int
  data  DateTime

  veiculoId Int
  veiculo   Veiculo @relation(fields: [veiculoId], references: [id])

  createdAt DateTime  @default(now())
  createdBy String    @db.VarChar(255)
  updatedAt DateTime? @updatedAt
  updatedBy String?   @db.VarChar(255)
  deletedAt DateTime?
  deletedBy String?   @db.VarChar(255)
}
